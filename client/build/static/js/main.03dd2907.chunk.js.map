{"version":3,"sources":["constants/uploadConstants.js","store.js","reducers/uploadReducers.js","api.js","session.js","components/Rating.js","components/Thumbnail.js","components/Poster.js","components/Category.js","components/LoadingBox.js","screens/HomeScreen.js","screens/LoginScreen.js","screens/RegisterScreen.js","base.js","screens/TestingScreen.js","screens/SearchScreen.js","components/Tag.js","screens/MovieScreen.js","screens/CreateMovieScreen.js","screens/ProfileScreen.js","screens/SaleScreen.js","screens/CartScreen.js","screens/PaymentScreen.js","screens/HistoryScreen.js","screens/WatchScreen.js","screens/SurveyScreen.js","screens/AdminScreen.js","components/Header.js","components/Footer.js","components/Chatbot2.js","components/Chatbot.js","App.js","index.js"],"names":["UPLOAD_FIREBASE_REQUEST","UPLOAD_FIREBASE_SUCCESS","UPLOAD_FIREBASE_FAIL","reducer","combineReducers","UploadFireBase","state","status","action","type","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","API","path","options","fetch","then","res","json","err","Error","message","APIRequest","data","headers","this","makeAPIRequest","method","body","JSON","stringify","storage","sessionStorage","setToken","token","setItem","getToken","getItem","authHeader","Authorization","isAdmin","hasOwnProperty","clearSession","clear","setCartNum","num","getCartNum","getOptions","opt","Promise","resolve","parse","getJSON","r","getAdminData","setAdminData","Rating","props","RatingWrap","styled","div","Thumbnail","id","src","alt","width","includes","replace","to","Img","img","Poster","title","date","value","PosterWrap","InnerWrap","Title","Info","name","precision","readOnly","ReleaseDate","split","section","Category","items","keys","Container","Keys","sort","join","undefined","ItemSection","length","span","LoadingBox","Wrap","className","HomeScreen","api","useState","recs","setrecs","useEffect","Session","newRecs","filter","rec","movies","map","movie","url","rating","releaseDate","category","catch","console","log","Screen","CategoryContainer","LoginScreen","React","email","setEmail","password","setPassword","history","useHistory","push","Form","onSubmit","e","preventDefault","postJSON","admin","goBack","alert","autoComplete","Header","Label","htmlFor","onChange","target","Button","variant","size","style","backgroundColor","RegisterContainer","color","fontSize","fontWeight","textTransform","onClick","form","header","label","RegisterScreen","bdate","setBdate","birthDate","firebase_app","firebase","initializeApp","TestingScreen","useDispatch","setType","setPath","tok","setTok","setJSON","setRes","labelId","range","rows","Options","labelName","FormControl","Select","v","MenuItem","SearchScreen","location","useLocation","setCategory","query","setQuery","result","setResult","page","setPage","dropDown","setDropDown","sortBy","setSortBy","sortOrder","setSortOrder","urlParams","URLSearchParams","search","newQ","get","newCat","newPage","parseInt","newSortBy","newOrder","isNaN","m","i","relevance","compareTitle","compareRating","compareDate","compareRelevance","reverse","a","b","Date","handleSortChange","set","pathname","toString","SortBox","Sort","class","SortForm","Left","checked","for","Right","start","Math","min","posters","slice","makePosters","PageNav","setPageIndex","index","numItems","maxItems","totalPages","ceil","currPage","pageArr","PageNavBox","PageNum","selected","nav","Tag","outline","urlparams","q","href","Box","MovieScreen","useParams","open","setOpen","buying","setBuying","watch","setWatch","cart","setCart","numRatings","setNumRatings","avgRating","setAvgRating","promoted","setPromoted","purchased","rented","inCartRent","inCartPurchase","numRating","Number","ispromoted","button","CButton","Mbutton","fullWidth","adminButton","ButtonWrap","Msg","AllRating","NumRating","movieID","userRating","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","purchaseprice","rentprice","DialogActions","rent","add","autoFocus","Minfo","Stitle","Overview","overview","adult","runtime","ISO6391","getName","language","release_date","Mitems","genres","genre","keywords","keyword","RatingForm","inp","setInp","load","setLoad","setRating","able","setAble","RatingContainer","event","newValue","val","handleRate","disabled","PosterPic","filterOptions","createFilterOptions","limit","CreateMovieScreen","loadEdit","setLoadEdit","originTitle","SetoriginTitle","originurl","setOriginUrl","isNewposter","setIsNewposter","setOptions","selectGens","setSelectgens","selectKeys","setSelectkeys","selectLang","setSelectLang","selectAge","setSelectAge","image","setImage","titleInput","setTitleInput","setOverview","purchase","setPurchase","setRent","setRuntime","setDate","SubmitNewMovie","ref","child","put","snapshot","getDownloadURL","age_rating","error","EditExistingMovie","op","languages","getAllNames","processOptions","Head","Suploader","imgExtension","maxFileSize","withPreview","singleImage","Files","Bwrap","Text","White","Tinput","Autocomplete","multiple","getOptionLabel","option","renderInput","params","TextField","InputProps","disableUnderline","getCode","ageRatings","Stextarea","PriceBox","Sinput","step","pattern","ImageUploader","textarea","input","ProfileScreen","selectGenres","setSelectGenres","likedGenres","setLikedGenres","edit","setEdit","setGenres","likedGenre","favGenres","Items","Section","UserIcon","Edit","margin","SaleScreen","typeOptions","time","setTime","timeOptions","setSort","sortOptions","update","setUpdate","salesData","setSalesData","fetchData","seconds","currTime","floor","getTime","queryStr","end","FormContainer","descending","Table","movieTitle","Object","k","sales","TableContainer","columns","field","headerName","pageSize","CartScreen","change","total","setTotal","canCheckout","setCanCheckout","newCart","sum","item","price","ItemList","Total","toFixed","Checkout","Item","setChange","ItemContainer","Description","Price","Delete","PaymentScreen","cardNo","setCardNo","cvv","setCVV","expDate","setExpDate","test","mth","yr","placeholder","SubSection","HistoryScreen","cat","setCat","rental","endtime","ptime","days","Time","WatchScreen","setErr","setTitle","useRef","current","scrollIntoView","VideoContainer","Video","SurveyScreen","go","SkipContainer","SkipButton","fade","keyframes","AdminScreen","selectTitle","setSelectTitle","setGo","LogoutButton","SwitchButton","Control","SearchLabel","View","Movie","Sale","userID","user","userEmail","pdate","endDate","flex","setMovie","Load","MovieBox","InfoLabel","capFirst","word","charAt","toUpperCase","getUsername","setInput","isDropDown","isMenuDropDown","setMenuDropDown","cartN","setCartN","setKeywords","selectedGenres","setSelectedGenres","selectedKeywords","setSelectedKeywords","searchParams","g","w","signIn","LoginButton","userIcon","onMouseEnter","onMouseLeave","MenuDropDown","hide","Option","cartIcon","CartIcon","Bar","Wrapper","Logo","Middle","SearchBar","urlQuery","handleQuery","OptionWrap","CurrentOption","IconWrapper","black","DropDown","SearchButton","Admin","Footer","Inner","StyledImg","Chatbot2","config","actionProvider","ActionProvider","messageParser","MessageParser","txtMsg","txt","Type","Content","from","content","createMessage","createChatBotMessage","setStateFunc","createClientMessage","setState","confusedMessage","updateChatbotState","movieMessage","prevState","messages","initialMessages","widget","botName","customComponents","botAvatar","botChatMessage","MyMessage","BotAvatar","Icon","Dialogue","Search","link","Recommend","DialogueWrap","toLowerCase","background","Chatbot","direction","setDirection","animationIcon","animationBox","setAnimationBox","animation","Chatbox","App","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.03dd2907.chunk.js","sourcesContent":["export const UPLOAD_FIREBASE_REQUEST = 'UPLOAD_FIREBASE_REQUEST';\r\nexport const UPLOAD_FIREBASE_SUCCESS = 'UPLOAD_FIREBASE_SUCCESS';\r\nexport const UPLOAD_FIREBASE_FAIL = 'UPLOAD_FIREBASE_FAIL';\r\n","import {\r\n    applyMiddleware,\r\n    combineReducers,\r\n    compose,\r\n    createStore\r\n} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport { UploadFireBaseReducer } from './reducers/uploadReducers';\r\n\r\nconst initialState = {};\r\n\r\n\r\nconst reducer = combineReducers({\r\n    UploadFireBase: UploadFireBaseReducer\r\n})\r\n\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(\r\n    reducer,\r\n    initialState,\r\n    composeEnhancer(applyMiddleware(thunk)));\r\nexport default store;","import { UPLOAD_FIREBASE_FAIL, UPLOAD_FIREBASE_REQUEST, UPLOAD_FIREBASE_SUCCESS } from \"../constants/uploadConstants\";\r\n\r\nexport const UploadFireBaseReducer = (state = {status:''}, action) =>{\r\n\r\n    switch(action.type){\r\n        case UPLOAD_FIREBASE_REQUEST:\r\n            return {status: 'uploading'};\r\n        case UPLOAD_FIREBASE_SUCCESS:\r\n            return {status: 'uploaded'};\r\n        case UPLOAD_FIREBASE_FAIL:\r\n            return {status: 'uploadError'};\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","/**\r\n * Helper function to make a request to `path` with `options` and parse the response as JSON.\r\n */\r\nconst APIRequest = (path, options) => fetch(path, options)\r\n  .then((res) => {\r\n    if (res.status === 200) return res.json();\r\n    return res.json().then((err) => {\r\n      throw new Error(err.message);\r\n    });\r\n  });\r\n\r\n// const backendUrl = 'http://127.0.0.1:5000';\r\n\r\n/**\r\n * Use the methods in this API class to make calls to backend.\r\n */\r\nexport default class API {\r\n  \r\n  // constructor(url = backendUrl) {\r\n  //   this.url = url;\r\n  // }\r\n\r\n  \r\n  makeAPIRequest(path, options) {\r\n    return APIRequest(`/api/${path}`, options);\r\n  }\r\n\r\n  postJSON(path, data = {}, headers = {}) {\r\n    return this.makeAPIRequest(path, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...headers,\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n  }\r\n\r\n  putJSON(path, data = {}, headers = {}) {\r\n    return this.makeAPIRequest(path, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...headers,\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n  }\r\n\r\n  getJSON(path, headers = {}) {\r\n    return this.makeAPIRequest(path, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...headers,\r\n      },\r\n    });\r\n  }\r\n\r\n  deleteJSON(path, headers = {}) {\r\n    return this.makeAPIRequest(path, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...headers,\r\n      },\r\n    });\r\n  }\r\n}\r\n","import API from './api';\r\n\r\n// functions related to user session information\r\nconst storage = window.sessionStorage\r\n\r\n// user token getter/setter and autherization header constructor\r\nexport function setToken(token) {\r\n\tstorage.setItem('token', token);\r\n}\r\n\r\nexport function getToken() {\r\n    return storage.getItem('token');\r\n}\r\n\r\nexport function removeToken() {\r\n    storage.removeItem('token');\r\n}\r\n\r\nexport function authHeader() {\r\n    return getToken() ? \r\n        { Authorization: `Bearer ${getToken()}`} : {};\r\n}\r\n\r\n// user email getter/setter\r\nexport function setEmail(email) {\r\n    storage.setItem('email', email);\r\n}\r\n\r\nexport function getEmail() {\r\n    return storage.getItem('email');\r\n}\r\n\r\n// user is admin setter/checker\r\nexport function setAdmin() {\r\n    storage.setItem('admin', true);\r\n}\r\n\r\nexport function isAdmin() {\r\n    return storage.hasOwnProperty('admin');\r\n}\r\n\r\n// clear session\r\nexport function clearSession() {\r\n    storage.clear();\r\n}\r\n\r\n// cart setter/getter\r\nexport function setCartNum(num) {\r\n    storage.setItem('cartNum', num)\r\n}\r\n\r\nexport function getCartNum() {\r\n    return storage.getItem('cartNum');\r\n}\r\n\r\nexport function IncrementCartNum() {\r\n    if (getCartNum())\r\n        storage.setItem('cartNum', parseInt(getCartNum())+1)\r\n}\r\n\r\nexport function DecrementCartNum() {\r\n    if (getCartNum())\r\n        storage.setItem('cartNum', parseInt(getCartNum())-1)\r\n}\r\n\r\n// fetch and cache options, returns promise resolved with options\r\nexport function getOptions() {\r\n    // if in cache return options\r\n    const opt = storage.getItem('options');\r\n    if (opt) return Promise.resolve(JSON.parse(opt));\r\n    // else fetch options\r\n    const api = new API();\r\n    return api.getJSON(\"options\", authHeader())\r\n            .then(r => {\r\n                storage.setItem('options', JSON.stringify(r));\r\n                return r;\r\n            });\r\n}\r\n\r\n// admin data getter/setter\r\nexport function getAdminData(data) {\r\n    return storage.getItem('adminData');\r\n}\r\n\r\nexport function setAdminData(data) {\r\n    storage.setItem('adminData', data);\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport MatRating from '@material-ui/lab/Rating';\r\n\r\n// styled rating component\r\nexport default function Rating(props) {\r\n\treturn <RatingWrap><MatRating {...props} /></RatingWrap>;\r\n}\r\n\r\nconst RatingWrap = styled.div`\r\n    .MuiRating-iconEmpty {\r\n        color: #222;\r\n    }\r\n`;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// display poster thumbnails\r\nexport default function Thumbnail(props) {\r\n    const {id, src, alt, width} = props;\r\n\r\n    // reduce poster size to speed up image retreivel\r\n    if (width && src.includes(\"https://image.tmdb.org/t/p/\")) {\r\n        src.replace('original', `w${width}`);\r\n    }\r\n\r\n\treturn (\r\n\t\t<Link to = {`/movie/${id}`}>\r\n            <Img src={src} alt={alt} />\r\n        </Link>\t\r\n\t);\r\n}\r\n\r\nconst Img = styled.img`\r\n\twidth: 100%;\r\n    height:100%;\r\n    object-fit: cover;\r\n    overflow: hidden;\r\n    :hover {\r\n        box-shadow: 1px 1px 10px 5px #ccc;\r\n    }\r\n`;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Rating from './Rating';\r\nimport { Link } from 'react-router-dom';\r\nimport Thumbnail from './Thumbnail';\r\n\r\nexport default function Poster(props) {\r\n    const {id, src, title, value, date} = props;\r\n\r\n    return (\r\n        <PosterWrap>\r\n            <InnerWrap>\r\n                <Thumbnail id={id} src={src} alt={title + ' poster'} width='300'/>\r\n            </InnerWrap>\r\n            <Title>{title}</Title>\r\n\r\n            <Info>\r\n                <Rating name=\"half-rating-read\" value={props.value} precision={0.5} readOnly /> \r\n                <ReleaseDate>{date.split('-')[0]}</ReleaseDate>                \r\n            </Info>\r\n        </PosterWrap> \r\n    );\r\n\r\n}\r\n\r\nconst PosterWrap = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 240px;\r\n    \r\n    margin: 3rem;\r\n\r\n    @media only screen and (max-width: 1635px) {\r\n        width: 180px;\r\n        \r\n      }\r\n    \r\n`;\r\n\r\nconst Title = styled.section`\r\n    color: white;\r\n    width: 100%;\r\n    font-size: 1rem;\r\n    margin-top: 5px;\r\n    /*line-height: 1.5em;\r\n    height: 3em;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: nowrap;*/\r\n`;\r\n\r\nconst InnerWrap = styled.div`\r\n    width: 240px;\r\n    height: 350px;\r\n    @media only screen and (max-width: 1635px) {\r\n        width: 180px;\r\n        height: 260px;\r\n      }\r\n\r\n`;\r\n\r\nconst PosterPic = styled.img`\r\n    max-width: 100%;\r\n    max-height: 100%;\r\n\r\n`;\r\n\r\nconst Sspan = styled.div`\r\n    overflow: hidden;\r\n    height:20px;\r\n    margin-bottom:1rem;\r\n`;\r\n\r\nconst Info = styled.div`\r\n    display:flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n    margin-top: 10px;\r\n\r\n`;\r\n\r\nconst ReleaseDate = styled.section`\r\n    position: relative;\r\n    top: -3px;\r\n    font-size: 1rem;\r\n    color: #555;\r\n    margin: 0 10px;\r\n    font-weight: 500;\r\n`;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport default function Category(props) {\r\n\tconst {title, items, keys} = props;\r\n    \r\n    return (\r\n        <Container>\r\n            <header> \r\n                {title}:&nbsp; \r\n                <Keys>{keys ? keys.sort().join(', ') : undefined}</Keys>\r\n            </header>\r\n            <ItemSection>\r\n                {items.length === 0 ? <span> No Result </span> : items}\r\n            </ItemSection>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst Container = styled.section`\r\n    display: flex;\r\n    flex-direction: column;\r\n    \r\n    header {\r\n        color: white;\r\n        font-size: 2rem;;\r\n        font-weight: 500;\r\n    }\r\n    margin-top: 5rem;\r\n    width: 100%;\r\n`;\r\n\r\nconst ItemSection = styled.section`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    width:100%;\r\n    > span {\r\n        font-size: 3rem;\r\n        font-weight: 500;\r\n        color: #333;\r\n        margin: 50px;\r\n\r\n    }\r\n`;\r\n\r\nconst Keys = styled.span`\r\n    \r\n`","import React from 'react'\r\nimport styled from 'styled-components';\r\n\r\nexport default function LoadingBox() {\r\n    return (\r\n\r\n        <Wrap>\r\n            <i className=\"fas fa-spinner fa-spin\"></i> Loading...\r\n        </Wrap>\r\n    )\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nconst Wrap = styled.div`\r\n    margin-top: 5rem;\r\n    color:white;\r\n    font-size: 20px;\r\n    \r\n`","import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components';\r\nimport Poster from '../components/Poster';\r\nimport Category from '../components/Category';\r\nimport LoadingBox from '../components/LoadingBox';\r\nimport API from '../api';\r\nimport * as Session from '../session';\r\n\r\nexport default function HomeScreen() {\r\n    let api = new API();\r\n    const [recs, setrecs] = useState([]);\r\n    useEffect(() => {\r\n        api.getJSON(\"user/rec\", Session.authHeader())\r\n            .then(r => {\r\n                 // console.log(r);\r\n                let newRecs = r.recs.filter(rec => rec.movies.length !== 0);\r\n                newRecs = newRecs.map(rec => {\r\n                    let items = rec.movies.map(movie => \r\n                        <Poster \r\n                            key={movie.id}\r\n                            id={movie.id}\r\n                            src={movie.url} \r\n                            value={movie.rating}\r\n                            title={movie.title}\r\n                            date={movie.releaseDate}\r\n                        />\r\n                    );\r\n                    return (<Category title={rec.category} items={items} />);\r\n                });\r\n                setrecs([...newRecs]);\r\n\r\n            }).catch((err) => console.log(err.message));\r\n      }, []);\r\n\r\n    \r\n    return(\r\n        <Screen>\r\n            {recs.length === 0 ? (<LoadingBox />) : recs.map(rec => <CategoryContainer> {rec} </CategoryContainer>)}\r\n\r\n        </Screen>\r\n    );\r\n}\r\n\r\n\r\nconst Screen = styled.section`\r\n    border: none;\r\n    width: 100vw;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`;\r\n\r\nconst CategoryContainer = styled.section`\r\n    width:90vw;\r\n`;\r\n\r\nconst MovieSection = styled.div`\r\n    margin: auto;\r\n    width:100%;\r\n`;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport { useHistory } from 'react-router-dom';\r\nimport API from '../api';\r\nimport * as Session from '../session';\r\n\r\nexport default function LoginScreen() {\r\n    const [email, setEmail] = React.useState('');\r\n    const [password, setPassword] = React.useState('');\r\n    const api = new API();\r\n    const history = useHistory();\r\n    const onSubmit = (e) => {\r\n        // stop auto redirect\r\n        e.preventDefault();\r\n\r\n        const data = {\r\n          email,\r\n          password,\r\n        };\r\n\r\n        api.postJSON('auth/login', data)\r\n           .then((r) => {\r\n              console.log(r);\r\n              // store session token\r\n              Session.setToken(r.token);\r\n              // store email\r\n              Session.setEmail(email);\r\n              // set if admin\r\n              if (r.admin) {\r\n                Session.setAdmin();\r\n                history.push('/admin');\r\n                return;\r\n              }\r\n              // redirect to prev page\r\n              history.goBack();\r\n            })\r\n           .catch((err) => alert(err['message']));\r\n    };\r\n\r\n    // if user logged in redirect to home\r\n    if (Session.getToken()) history.push('/');\r\n\r\n\treturn (\r\n        <Screen>\r\n            <Form onSubmit={onSubmit} autoComplete=\"off\">\r\n                <Header>Login</Header>\r\n                <Label htmlFor=\"email\">\r\n                  <span>Email:</span>\r\n                  <input\r\n                      type=\"text\"\r\n                      id=\"email\"\r\n                      name=\"email\"\r\n                      value={email}\r\n                      onChange={(e) => setEmail(e.target.value)}\r\n                  />\r\n                </Label>\r\n                <Label htmlFor=\"password\">\r\n                  <span>Password:</span>\r\n                  <input\r\n                      type=\"password\"\r\n                      id=\"password\"\r\n                      name=\"password\"\r\n                      value={password}\r\n                      onChange={(e) => setPassword(e.target.value)}\r\n                  />\r\n                </Label>\r\n                <Button \r\n                    type=\"submit\"\r\n                    variant=\"contained\" \r\n                    size=\"large\" \r\n                    style={{ backgroundColor: 'white' }}\r\n                >\r\n                    Sign In\r\n                </Button>\r\n                <RegisterContainer>\r\n                    <span> New to MovieFlix? </span>\r\n                    <Button                          \r\n                        color=\"primary\"\r\n                        style={{ \r\n                            fontSize: '1.2rem',\r\n                            fontWeight: 'bold', \r\n                            textTransform: 'none', \r\n                        }}\r\n                        onClick={() => { history.push('/register'); }}\r\n                    >\r\n                        Register\r\n                    </Button>\r\n                </RegisterContainer>\r\n            </Form>\r\n        </Screen>\r\n\t);\r\n}\r\n\r\nconst Screen = styled.section`\r\n\tborder: none;\r\n\twidth: 100vw;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`;\r\n\r\nconst Form = styled.form`\r\n    margin-top: 150px;\r\n    border: none;\r\n    width: min(80vw, 650px);\r\n    min-height: 500px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    > * {\r\n        margin-bottom: 40px;\r\n    }\r\n`;\r\n\r\nconst Header = styled.header`\r\n    font-weight: bold;\r\n    font-size: 2.5rem;\r\n    color: white;\r\n`;\r\n\r\nconst Label = styled.label`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 70%;\r\n    > * {\r\n        min-height: 30px;\r\n    }\r\n\r\n    input {\r\n        width: 100%;\r\n        font-size: 1.5rem;\r\n        height: 40px;\r\n    }\r\n\r\n    span {\r\n        margin-bottom: 5px;\r\n        font-size: min(6vw, 1.5rem);\r\n        color: white;\r\n    }\r\n`;\r\n\r\nconst RegisterContainer = styled.section`\r\n    display: flex;\r\n    align-items: baseline;\r\n    justify-content: center;\r\n    flex-wrap: wrap;\r\n    margin-top: 50px;\r\n    > * {\r\n        color: white;\r\n        font-size: 1rem;\r\n    }\r\n`;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport { useHistory } from 'react-router-dom';\r\nimport API from '../api';\r\nimport * as Session from '../session';\r\n\r\nexport default function RegisterScreen() {\r\n    const [email, setEmail] = React.useState('');\r\n    const [password, setPassword] = React.useState('');\r\n    const [bdate, setBdate] = React.useState('');\r\n    const api = new API();\r\n    const history = useHistory();\r\n    const onSubmit = (e) => {\r\n        // stop auto redirect\r\n        e.preventDefault();\r\n\r\n        if (!email || !password || !bdate) {\r\n            alert('Missing entries.');\r\n            return;\r\n        }\r\n\r\n        const data = {\r\n          email,\r\n          password,\r\n          birthDate: bdate,\r\n        };\r\n\r\n        // submit register to backend\r\n        console.log(data);\r\n        api.postJSON('auth/register', data)\r\n           .then((r) => {\r\n              console.log(r);\r\n              // store session token\r\n              Session.setToken(r.token);             \r\n              // redirect to prev page\r\n              history.push('/survey');\r\n            })\r\n           .catch((err) => alert(err['message']));\r\n    };\r\n\r\n    // if user logged in redirect to home\r\n    if (Session.getToken()) history.push('/');\r\n\r\n\treturn (\r\n        <Screen>\r\n            <Form onSubmit={onSubmit} autoComplete=\"off\">\r\n                <Header>Register</Header>\r\n                <Label htmlFor=\"email\">\r\n                  <span>Email:</span>\r\n                  <input\r\n                      type=\"text\"\r\n                      id=\"email\"\r\n                      name=\"email\"\r\n                      value={email}\r\n                      onChange={(e) => setEmail(e.target.value)}\r\n                  />\r\n                </Label>\r\n                <Label htmlFor=\"password\">\r\n                  <span>Password:</span>\r\n                  <input\r\n                      type=\"password\"\r\n                      id=\"password\"\r\n                      name=\"password\"\r\n                      value={password}\r\n                      onChange={(e) => setPassword(e.target.value)}\r\n                  />\r\n                </Label>\r\n                <Label htmlFor=\"bdate\">\r\n                  <span> Date of Birth </span>\r\n                  <input\r\n                      type=\"date\"\r\n                      id=\"bdate\"\r\n                      name=\"bdate\"\r\n                      value={bdate}\r\n                      onChange={(e) => setBdate(e.target.value)}\r\n                  />\r\n                </Label>\r\n                <Button \r\n                    type=\"submit\"\r\n                    variant=\"contained\" \r\n                    size=\"large\" \r\n                    style={{ backgroundColor: 'white' }}\r\n                >\r\n                    Submit\r\n                </Button>\r\n                <RegisterContainer>\r\n                    <span> Already have an account? </span>\r\n                    <Button                          \r\n                        color=\"primary\"\r\n                        style={{ \r\n                            fontSize: '1.2rem',\r\n                            fontWeight: 'bold', \r\n                            textTransform: 'none', \r\n                        }}\r\n                        onClick={() => { history.push('/login'); }}\r\n                    >\r\n                        Sign in\r\n                    </Button>\r\n                </RegisterContainer>\r\n            </Form>\r\n        </Screen>\r\n\t);\r\n}\r\n\r\nconst Screen = styled.section`\r\n\tborder: none;\r\n\twidth: 100vw;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`;\r\n\r\nconst Form = styled.form`\r\n    margin-top: 150px;\r\n    border: none;\r\n    width: min(80vw, 650px);\r\n    min-height: 500px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    > * {\r\n        margin-bottom: 40px;\r\n    }\r\n`;\r\n\r\nconst Header = styled.header`\r\n    font-weight: bold;\r\n    font-size: 2.5rem;\r\n    color: white;\r\n`;\r\n\r\nconst Label = styled.label`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 70%;\r\n    > * {\r\n        min-height: 30px;\r\n    }\r\n\r\n    input {\r\n        width: 100%;\r\n        font-size: 1.5rem;\r\n        height: 40px;\r\n    }\r\n\r\n    span {\r\n        margin-bottom: 5px;\r\n        font-size: min(6vw, 1.5rem);\r\n        color: white;\r\n    }\r\n`;\r\n\r\nconst RegisterContainer = styled.section`\r\n    display: flex;\r\n    align-items: baseline;\r\n    justify-content: center;\r\n    flex-wrap: wrap;\r\n    margin-top: 50px;\r\n    > * {\r\n        color: white;\r\n        font-size: 1rem;\r\n    }\r\n`;","import firebase from 'firebase';\r\nimport 'firebase/storage'\r\n\r\nexport const firebase_app = firebase.initializeApp({\r\n    \"projectId\": \"movieflix-b71c2\",\r\n    \"appId\": \"1:852287054194:web:e9b468d8b31892ec62fdeb\",\r\n    \"storageBucket\": \"movieflix-b71c2.appspot.com\",\r\n    \"locationId\": \"australia-southeast1\",\r\n    \"apiKey\": \"AIzaSyCIfVENN_qkFun4TMCZzx8Bclp0vJ8DqDg\",\r\n    \"authDomain\": \"movieflix-b71c2.firebaseapp.com\",\r\n    \"messagingSenderId\": \"852287054194\",\r\n    \"measurementId\": \"G-12VFWQFGJL\"\r\n  });","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch,useSelector } from 'react-redux'\r\nimport ImageUploader from 'react-images-upload'\r\nimport { uploadFirebase } from '../actions/uploadActions'\r\nimport { FormControl, Select, MenuItem, InputLabel } from '@material-ui/core';\r\nimport API from '../api.js';\r\nimport styled from 'styled-components';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\n\r\nexport default function TestingScreen() {\r\n    const dispatch = useDispatch()\r\n    const [image,setImage] =useState()\r\n    const [type, setType] = React.useState('GET');\r\n    const typeOptions = ['GET', 'POST'];\r\n    const [path, setPath] = React.useState('');\r\n    const [tok, setTok] = React.useState(\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NjczLCJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSJ9.7b7SgDXIdtmA5ddTRDTgE9Kod7t4_HRMJbm_ItlZF_Y\");\r\n    const [json, setJSON] = React.useState('');\r\n    const [res, setRes] = React.useState('');\r\n    const api = new API();\r\n    const onSubmit = (e) => {\r\n        // stop auto redirect\r\n        e.preventDefault();\r\n\r\n        if (type === 'GET') {\r\n            api.getJSON(path, { Authorization: `Bearer ${tok}`})\r\n                .then(r => {\r\n                    console.log(r);\r\n                    setRes(JSON.stringify(r));\r\n                })\r\n                .catch((err) => alert(err['message']));\r\n        } else {\r\n            let data = {}\r\n            try {\r\n                data = JSON.parse(json);\r\n            } catch(e) {\r\n                alert(\"Body: incorrect json format\");\r\n                return;\r\n            }\r\n            api.postJSON(path, data, { Authorization: `Bearer ${tok}`})\r\n                .then((r) => {\r\n                   console.log(r);\r\n                   setRes(JSON.stringify(r));\r\n                 })\r\n                .catch((err) => alert(\"Response error: \" + err['message']));\r\n        }\r\n    };\r\n\r\n    const handleUpload = () =>{\r\n        if(image === undefined){\r\n            alert('Please upload cover image');\r\n            return\r\n        }\r\n        dispatch( uploadFirebase(image) )\r\n    }\r\n\r\n    return(\r\n        <Screen>\r\n            <Form onSubmit={onSubmit} autoComplete=\"off\">\r\n                <Header>Test</Header>\r\n                <Label htmlFor=\"select-type\">                      \r\n                        <Options\r\n                            \r\n                            labelId=\"type-label\"\r\n                            id=\"select-type\"\r\n                            value={type}\r\n                            onChange={(e) => {setType(e.target.value);}}\r\n                            range={typeOptions}\r\n                        />\r\n                </Label>\r\n                <Label htmlFor=\"path\">\r\n                  <span>Path:</span>\r\n                  <span>e.g. user/login (do not include /api/)</span>\r\n                  <input\r\n                      type=\"text\"\r\n                      id=\"path\"\r\n                      name=\"path\"\r\n                      value={path}\r\n                      onChange={(e) => setPath(e.target.value)}\r\n                  />\r\n                </Label>\r\n                <Label htmlFor=\"token\">\r\n                  <span>Token:</span>\r\n                  <input\r\n                      type=\"text\"\r\n                      id=\"token\"\r\n                      name=\"token\"\r\n                      value={tok}\r\n                      onChange={(e) => setTok(e.target.value)}\r\n                  />\r\n                </Label>\r\n                <Label htmlFor=\"json\">\r\n                  <span>Body:</span>\r\n                  <textarea\r\n                      rows='10'\r\n                      id=\"json\"\r\n                      name=\"json\"\r\n                      value={json}\r\n                      onChange={(e) => setJSON(e.target.value)}\r\n                  />\r\n                </Label>\r\n                <Label htmlFor=\"res\">\r\n                  <span>Response:</span>\r\n                  <textarea\r\n                      rows='10'\r\n                      \r\n                      id=\"res\"\r\n                      name=\"res\"\r\n                      value={res}\r\n                      onChange={(e) => setRes(e.target.value)}\r\n                  />\r\n                </Label>\r\n                <Button \r\n                    type=\"submit\"\r\n                    variant=\"contained\" \r\n                    size=\"large\" \r\n                    style={{ backgroundColor: 'white' }}\r\n                >\r\n                    Submit\r\n                </Button>\r\n            </Form>\r\n            {/*<div>\r\n        <ImageUploader\r\n        imgExtension={['.jpg', '.png']}\r\n        label=\"Maximum file size: 5MB , accepted format: jpg|png\"\r\n        maxFileSize={5242880}\r\n        withPreview={true}\r\n        singleImage={true}\r\n        onChange={(Files) => setImage(Files[0])}\r\n\r\n        />\r\n\r\n        <button \r\n            onClick = {handleUpload}>\r\n            upload to firebase\r\n        </button>\r\n\r\n\r\n        </div>*/}\r\n        </Screen>\r\n    )\r\n\r\n    \r\n}\r\n\r\nconst Screen = styled.section`\r\n    border: none;\r\n    width: 100vw;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    \r\n`;\r\n\r\nconst Form = styled.form`\r\n    margin-top: 150px;\r\n    padding: 20px;\r\n    border: none;\r\n    width: 50vw;\r\n    min-height: 500px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    > * {\r\n        margin-bottom: 40px;\r\n    }\r\n    background-color: white;\r\n`;\r\n\r\nconst Header = styled.header`\r\n    font-weight: bold;\r\n    font-size: 2.5rem;\r\n    \r\n`;\r\n\r\nconst Label = styled.label`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 70%;\r\n    > * {\r\n        min-height: 30px;\r\n    }\r\n\r\n    input {\r\n        width: 100%;\r\n        font-size: 1.5rem;\r\n        height: 40px;\r\n    }\r\n\r\n    span {\r\n        margin-bottom: 5px;\r\n        font-size: min(6vw, 1.5rem);\r\n        \r\n    }\r\n`;\r\n\r\nconst RegisterContainer = styled.section`\r\n    display: flex;\r\n    align-items: baseline;\r\n    justify-content: center;\r\n    flex-wrap: wrap;\r\n    margin-top: 50px;\r\n    > * {\r\n        color: white;\r\n        font-size: 1rem;\r\n    }\r\n`;\r\n\r\nconst Options = (props) => {\r\n  const {\r\n    labelName, labelId, id, value, onChange, range,\r\n  } = props;\r\n  return (\r\n    <FormControl variant=\"outlined\">\r\n      <Select\r\n        labelId={labelId}\r\n        id={id}\r\n        value={value}\r\n        onChange={onChange}\r\n      >\r\n        {range.map((v) => <MenuItem key={v} value={v}>{v}</MenuItem>)}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n};","import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components';\r\nimport Poster from '../components/Poster';\r\nimport Category from '../components/Category';\r\nimport LoadingBox from '../components/LoadingBox';\r\nimport API from '../api';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Link,\r\n  useLocation,\r\n  useHistory\r\n} from \"react-router-dom\";\r\n\r\nexport default function SearchScreen() {\r\n    let api = new API();\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    const maxPosters = 20;\r\n    const [category, setCategory] = useState(undefined);\r\n    const [query, setQuery] = useState(undefined);\r\n    const [result, setResult] = useState(undefined);\r\n    const [posters, setPosters] = useState([]);\r\n    const [page, setPage] = useState(0);\r\n    const [dropDown, setDropDown] = useState(false);\r\n\r\n    //sort form\r\n    const [sortBy, setSortBy] = useState(undefined);\r\n    const [sortOrder, setSortOrder] = useState(undefined);\r\n    \r\n    //fetch results from backend on change of search params\r\n    useEffect(() => {\r\n        let urlParams = new URLSearchParams(location.search);\r\n\r\n        const newQ = urlParams.get('q');\r\n        const newCat = urlParams.get('category');\r\n        const newPage = parseInt(urlParams.get('page'));\r\n        const newSortBy = urlParams.get('sort_by');\r\n        const newOrder = urlParams.get('order');\r\n\r\n        // if not q or category direct to home\r\n        if (!newQ || !newCat) {\r\n            history.push('/');\r\n            return;\r\n        }\r\n\r\n        // if q and cat not changed but sort or page has\r\n        if (newQ === query && newCat === category) {\r\n            // set page, default 0\r\n            if (!isNaN(newPage)) setPage(newPage);\r\n            else setPage(0);\r\n            // set sort by, default relevance\r\n            if (newSortBy) setSortBy(newSortBy);\r\n            else setSortBy('relevance');\r\n            // set order, default descending\r\n            if (newOrder) setSortOrder(newOrder);\r\n            else setSortOrder('desc');\r\n            return;\r\n        }\r\n\r\n        api.getJSON(`search${location.search}`)\r\n            .then(r => {\r\n                console.log(r)\r\n                r.movies = r.movies.map((m, i) => ({...m, relevance: -i}))\r\n                setResult(r);\r\n                setQuery(newQ);\r\n                setCategory(newCat);\r\n                // set page, default 0\r\n                if (!isNaN(newPage)) setPage(newPage);\r\n                else setPage(0);\r\n                // set sort by, default relevance\r\n                if (newSortBy) setSortBy(newSortBy);\r\n                else setSortBy('relevance');\r\n                // set order, default descending\r\n                if (newOrder) setSortOrder(newOrder);\r\n                else setSortOrder('desc');\r\n\r\n            }).catch((err) => alert(err['message']));\r\n      }, [location]);\r\n\r\n\r\n    //handle sort\r\n    useEffect(() => {\r\n        // return if sort category or order not specified\r\n        if (!sortBy || !sortOrder) return;\r\n\r\n        if (sortBy === \"title\") result.movies.sort(compareTitle);\r\n        else if (sortBy === \"rating\") result.movies.sort(compareRating);\r\n        else if (sortBy === \"date\") result.movies.sort(compareDate);\r\n        else if (sortBy === 'relevance') result.movies.sort(compareRelevance);\r\n        if (sortOrder !== 'asc') result.movies.reverse();\r\n\r\n        setResult({...result});\r\n      }, [sortBy, sortOrder]);\r\n\r\n    // create category containing movie posters\r\n    const makePosters = (result, page) => {\r\n        // page should be zero indexed\r\n        let start = Math.min(page*maxPosters, result.movies.length);\r\n        let posters = result.movies.slice(start, start+maxPosters).map(movie => \r\n                <Poster \r\n                    key={movie.id}\r\n                    id={movie.id}\r\n                    src={movie.url} \r\n                    value={movie.rating}\r\n                    title={movie.title}\r\n                    date={movie.releaseDate}\r\n                />\r\n            );\r\n        return (<Category title={result.category} items={posters} keys={result.keys}/>);\r\n    };\r\n\r\n\r\n    const compareTitle = (a, b) => {\r\n        if ( a.title < b.title ){\r\n            return -1;\r\n        }\r\n        if ( a.title > b.title ){\r\n            return 1;\r\n        }\r\n            return 0;\r\n    };\r\n\r\n    const compareRating = (a, b) => {\r\n        return a.rating - b.rating;\r\n    };\r\n\r\n    const compareDate = (a, b) => {\r\n        return new Date(a.releaseDate) - new Date(b.releaseDate);\r\n    }\r\n\r\n    const compareRelevance = (a, b) => {\r\n        return a.relevance - b.relevance;\r\n    }\r\n\r\n    const handleSortChange = (e) => {\r\n        let urlParams = new URLSearchParams(location.search);\r\n        if (e.target.value === 'ascending') urlParams.set('order', 'asc');\r\n        else if (e.target.value === 'descending') urlParams.set('order', 'desc');\r\n        else urlParams.set('sort_by', e.target.value);\r\n\r\n        // update url\r\n        history.push({\r\n            pathname: '/search',\r\n            search: '?' + urlParams.toString(),\r\n            state: {},\r\n        })\r\n       \r\n    };\r\n    \r\n    const handlePageChange = (index) => {\r\n        let urlParams = new URLSearchParams(location.search);\r\n        urlParams.set('page', index);\r\n\r\n        // update url\r\n        history.push({\r\n            pathname: '/search',\r\n            search: '?' + urlParams.toString(),\r\n            state: {},\r\n        })\r\n    };\r\n\r\n    // display loading screen while fetching results\r\n    if (!result) return (<Screen><LoadingBox /></Screen>);\r\n\r\n    return(\r\n        <Screen>\r\n            <SortBox>\r\n                <Sort dropDown={dropDown} >\r\n                    <header onClick={() => {setDropDown(!dropDown)}}> Sort <i class=\"fas fa-sort-amount-down\"></i></header>\r\n                    <SortForm dropDown={dropDown}>\r\n                        <Left>\r\n                            <input type=\"radio\" id=\"relevance\" name=\"category\" \r\n                                    value=\"relevance\" onChange={handleSortChange}\r\n                                    checked={sortBy === 'relevance'}/>\r\n                            <label for=\"relevance\">Relevance</label>\r\n                            <input type=\"radio\" id=\"title\" name=\"category\" \r\n                                    value=\"title\" onChange={handleSortChange}\r\n                                    checked={sortBy === 'title'}/>\r\n                            <label for=\"title\">Title</label>\r\n                            <input type=\"radio\" id=\"rating\" name=\"category\" \r\n                                    value=\"rating\" onChange={handleSortChange}\r\n                                    checked={sortBy === 'rating'}/>\r\n                            <label for=\"rating\">Rating</label>\r\n                            <input type=\"radio\" id=\"date\" name=\"category\" \r\n                                    value=\"date\" onChange={handleSortChange}\r\n                                    checked={sortBy === 'date'}/>\r\n                            <label for=\"date\">Date</label>\r\n                        </Left>\r\n                        <div />\r\n                        <Right>\r\n                            <input type=\"radio\" id=\"ascending\" name=\"order\" \r\n                                value=\"ascending\" onChange={handleSortChange}\r\n                                checked={sortOrder === 'asc'}/>\r\n                            <label for=\"ascending\">Ascending</label>\r\n                            <input type=\"radio\" id=\"descending\" name=\"order\" \r\n                                    value=\"descending\" onChange={handleSortChange}\r\n                                    checked={sortOrder !== 'asc'}/>\r\n                            <label for=\"descending\">Descending</label>\r\n                        </Right>\r\n                    </SortForm>\r\n                </Sort>\r\n                </SortBox>\r\n            <CategoryContainer>\r\n                {makePosters(result, page)}\r\n            </CategoryContainer>\r\n            <PageNav page={page} setPageIndex={handlePageChange} numItems={result.movies.length} maxItems={maxPosters} />\r\n        </Screen>\r\n    );\r\n}\r\n\r\nconst Screen = styled.section`\r\n    border: none;\r\n    width: 100vw;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`;\r\n\r\nconst CategoryContainer = styled.section`\r\n    width:90vw;\r\n    \r\n`;\r\n\r\nconst SortBox = styled.section`\r\n    width: min(80vw, 850px);\r\n\r\n`\r\n\r\nconst Sort = styled.section`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    border-bottom: 1px solid ${props => props.dropDown ? 'white' : '#555'};\r\n    margin-top: 10px;\r\n    color: #ccc;\r\n    font-size: 1.2rem;\r\n    cursor:pointer;\r\n    > header {\r\n        font-weight: 500;\r\n        \r\n        i {\r\n            margin-left: 2px;\r\n        }\r\n    }\r\n\r\n    :hover {\r\n        color: white;\r\n        border-color: white;\r\n    }\r\n`;\r\n\r\nconst SortForm = styled.form`\r\n    width: 100%;\r\n    display: flex;\r\n    transition: height .5s;\r\n    height: ${props => props.dropDown ? '175px' : '0'};\r\n    overflow: hidden;\r\n\r\n    > div {\r\n        width: 0;\r\n        height: 97%;\r\n        border-left: 2px solid #555;\r\n        margin: 0 10px;\r\n    }\r\n`;\r\n\r\nconst Left = styled.section`\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    > * {\r\n        margin: 5px 0;\r\n    }\r\n    input[type=\"radio\"] {\r\n        display: none;\r\n    }\r\n\r\n    label {\r\n        width: 100%;\r\n        height: 40px;\r\n        cursor:pointer;\r\n        font-size: 1rem;\r\n        font-weight: 500;\r\n        line-height: 1;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n    }\r\n\r\n    input[type=\"radio\"]:checked+label {\r\n      transition: background-color .5s;\r\n      background-color: #222;\r\n    }\r\n\r\n\r\n`;\r\n\r\nconst Right = styled.section`\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    > * {\r\n        margin: 5px 0;\r\n    }\r\n    input[type=\"radio\"] {\r\n        display: none;\r\n    }\r\n\r\n    label {\r\n        width: 100%;\r\n        height: 40px;\r\n        cursor:pointer;\r\n        font-size: 1rem;\r\n        font-weight: 500;\r\n        line-height: 1;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n    }\r\n\r\n    input[type=\"radio\"]:checked+label {\r\n      transition: background-color .5s;\r\n      background-color: #222;\r\n    }\r\n\r\n\r\n`;\r\n\r\n\r\nfunction PageNav(props) {\r\n    // page is zero indexed\r\n    const {page, setPageIndex, numItems, maxItems} = props;\r\n\r\n    // set max page, curr page, array of page index\r\n    let totalPages = Math.ceil(numItems/maxItems);\r\n    let currPage = Math.min(page, totalPages-1);\r\n    let pageArr = [];\r\n    for (let i = 0; i < 11; i++)\r\n        if (page+(i-5) >= 0 && page+(i-5) < totalPages) \r\n            pageArr.push(page+(i-5));\r\n    \r\n    const handleClickIndex = (index) => {\r\n        setPageIndex(index);\r\n    }\r\n\r\n    const handleClickPrev = () => {\r\n        if (page-1 >= 0) setPageIndex(page-1);\r\n    }\r\n\r\n    const handleClickNext = () => {\r\n        if (page+1 < totalPages) setPageIndex(page+1);\r\n    }\r\n\r\n    return (\r\n        <PageNavBox>\r\n            <i className=\"fas fa-chevron-left\" onClick={handleClickPrev}></i>\r\n            {pageArr.map(page => <PageNum key={page} onClick={() => {handleClickIndex(page)}}\r\n                                            selected={page === currPage}> {page+1} </PageNum>)}\r\n            <i className=\"fas fa-chevron-right\" onClick={handleClickNext}></i>\r\n        </PageNavBox>\r\n    );\r\n\r\n}\r\n\r\nconst PageNavBox = styled.nav`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-top: 50px;\r\n    font-size: 1.3rem;\r\n    color: white;\r\n    line-height: 1;\r\n\r\n    > * {\r\n        margin: 0 5px;\r\n        cursor:pointer;\r\n\r\n    }\r\n\r\n    > i {\r\n        margin: 5px 10px 0 10px;\r\n        :hover {\r\n            text-decoration: underline;\r\n        }\r\n    }\r\n`;\r\n\r\nconst PageNum = styled.section`\r\n    text-decoration: ${props => props.selected ? 'underline' : 'none'};\r\n    :hover {\r\n        text-decoration: underline;\r\n    }\r\n`;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\n// genre, keyword tags\r\nexport default function Tag(props) {\r\n\tconst {type, name, outline} = props;\r\n\r\n\tconst handleClick = () => {\r\n        const data = {\r\n            q: name,\r\n            category: type,\r\n        }\r\n\r\n        const urlparams = new URLSearchParams(data)\r\n        window.location.href = \"/search?\" + urlparams.toString();\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Box onClick={handleClick} outline={outline}>\r\n\t\t\t{name}\r\n\t\t</Box>\r\n\t);\r\n}\r\n\r\nconst Box = styled.div`\r\n    width: auto;\r\n    height: 28px;\r\n    padding: 20px;\r\n    text-align: center;\r\n\tbackground: #3c4caa;\r\n\tcolor: white;\r\n\tfont-size: 1.25rem;\r\n\tborder-radius: 30px;\r\n    white-space: nowrap;\r\n    &:hover {\r\n        /*text-decoration-line: underline;*/\r\n        border: 2px solid ${props => props.outline ? props.outline : '#eee'};\r\n        cursor: pointer;\r\n    }\r\n`","import React, { useState, useEffect } from 'react';\r\nimport { useHistory, useParams, Link, useLocation } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport LoadingBox from '../components/LoadingBox';\r\nimport Box  from '@material-ui/core/Box';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Rating from '../components/Rating';\r\nimport Tag from '../components/Tag'\r\nimport API from '../api';\r\nimport * as Session from '../session';\r\nimport ISO6391 from 'iso-639-1';\r\n\r\nexport default function MovieScreen() {\r\n\r\n    let api = new API();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    //this movie's id\r\n    const { id } = useParams();\r\n    //is the movie params initialised yet ?\r\n    const [result, setResult] = useState(undefined);\r\n    //confirm buying modal\r\n    const [open, setOpen] = useState(false);\r\n    const [buying, setBuying]= useState(false);\r\n    //can we watch it ?\r\n    const [watch, setWatch] = useState(false);\r\n    //is in cart?\r\n    const [cart, setCart] = useState(false);\r\n    const [numRatings, setNumRatings] = useState(0);\r\n    const [avgRating, setAvgRating] = useState(0);\r\n    const [promoted, setPromoted] = useState(false);\r\n\r\n    //initialise movie page params\r\n    useEffect(() => {\r\n        // console.log(location);\r\n        setResult(undefined);\r\n        api.getJSON(`movie/${id}`, Session.authHeader())\r\n            .then(res=>{\r\n                setResult(res);\r\n                setWatch(res.purchased || res.rented);\r\n                setCart(res.inCartRent || res.inCartPurchase);\r\n                setNumRatings(res.numRating);\r\n                setAvgRating(Number(res.rating));\r\n                setPromoted(res.ispromoted);\r\n            }).catch((err) => alert(err['message']));\r\n      }, [id]);\r\n      \r\n    const handleBuy = () =>{\r\n        setOpen(true);\r\n        setBuying(true);\r\n    };\r\n\r\n    const handleRent = () =>{\r\n        setOpen(true);\r\n        setBuying(false);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleAddCart = () => {\r\n        // redirect to login if user not logged in\r\n        if (!Session.getToken()) {\r\n            history.push('/login');\r\n            return;\r\n        }\r\n\r\n        const data = {\r\n            movieID: id,\r\n            rent : !buying,\r\n            add: true,\r\n        };\r\n\r\n        //call backend api to adds movie to cart\r\n        api.postJSON(`user/cart`, data, Session.authHeader())\r\n            .then(r => {\r\n                Session.IncrementCartNum();\r\n                setCart(true);\r\n                history.push(`/movie/${id}`);\r\n            }).catch((err) => alert(err['message']));\r\n\r\n        setOpen(false);\r\n    };\r\n\r\n    //admin only, promotes movie on homepage\r\n    const handlePromote = () => {\r\n        const data = {\r\n            'movieID': id,\r\n            'promote': !promoted,\r\n        }\r\n\r\n        api.postJSON('user/admin/promote', data, Session.authHeader())\r\n            .then(r => {\r\n                setPromoted(!promoted);\r\n            }).catch((err) => alert(err['message']));\r\n            \r\n    }\r\n\r\n    let button = undefined;\r\n    if (cart) button = <CButton onClick={() => {history.push('/cart')}}> In Cart </CButton>;\r\n    else if (watch) button = <Mbutton \r\n                                onClick={() => history.push(`/watch/${id}`)}\r\n                                fullWidth\r\n                                variant=\"contained\" \r\n                                color=\"primary\">Watch</Mbutton>;\r\n    else button = [<Mbutton \r\n                        onClick={handleBuy}\r\n                        variant=\"contained\" \r\n                        color=\"primary\">Buy</Mbutton>,\r\n                    <Mbutton \r\n                        onClick={handleRent}\r\n                        variant=\"contained\" \r\n                        color=\"primary\">Rent</Mbutton>];\r\n\r\n    let adminButton = undefined;\r\n    if (Session.isAdmin()) \r\n        adminButton = [<Mbutton \r\n                        onClick={() => {history.push(`/edit/${id}`)}}\r\n                        variant=\"contained\" \r\n                        color=\"secondary\">Edit</Mbutton>,\r\n                        <Mbutton \r\n                        onClick={handlePromote}\r\n                        variant=\"contained\" \r\n                        color=\"secondary\">{promoted ? 'unpromote' : 'promote'}</Mbutton>];\r\n\r\n    // don't render page if movie data has yet to be retreived\r\n    if (!result) return (<Screen>(<LoadingBox /></Screen>);\r\n        \r\n    return (\r\n        <Wrap>\r\n            <Left>\r\n                <Title>{result.title}</Title>\r\n                <ButtonWrap>\r\n                    {adminButton}\r\n                </ButtonWrap>\r\n                <PosterWrap>                            \r\n                    <PosterPic src={result.url} alt=\"cat\"></PosterPic>\r\n                </PosterWrap>\r\n\r\n                <ButtonWrap>\r\n                    {button}                         \r\n                </ButtonWrap>\r\n\r\n                <RatingWrap>\r\n                    <Msg>Rating:</Msg>\r\n                    {(numRatings > 0) && <AllRating>                                 \r\n                                            <Rating name=\"half-rating-read\" value={avgRating} precision={0.5} readOnly size=\"large\"/>  \r\n                                            <NumRating>({numRatings})</NumRating>\r\n                                        </AllRating>}\r\n                    \r\n                    {Session.getToken() && <RatingForm \r\n                        movieID={id} \r\n                        avgRating={[avgRating, setAvgRating]}\r\n                        numRatings={[numRatings, setNumRatings]} \r\n                        userRating={Number(result.userRating)}\r\n                    />}\r\n\r\n                </RatingWrap>\r\n                <Dialog\r\n                    open={open}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">{\"Confirm Purchase\"}</DialogTitle>\r\n                    <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        {buying ? `Confirm buying ${result.title} for $${result.purchaseprice} ?` : `Confirm renting ${result.title} for 2 weeks at $${result.rentprice} ?`}\r\n                    </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={handleAddCart} color=\"primary\" autoFocus>\r\n                        Add to Cart\r\n                    </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </Left>\r\n            \r\n            <Right>\r\n                <Minfo>\r\n                    <Stitle>Overview</Stitle>\r\n                    <Overview>\r\n                        {result.overview}\r\n                    </Overview>\r\n                </Minfo>\r\n                <Minfo>\r\n                    <Stitle>MPAA: {result.adult}</Stitle>\r\n                </Minfo>\r\n                <Minfo>\r\n                    <Stitle>Runtime: {result.runtime} min</Stitle>\r\n                </Minfo>\r\n                <Minfo>\r\n                    <Stitle>Language: {ISO6391.getName(result.language)}</Stitle>\r\n                </Minfo>\r\n                <Minfo>\r\n                    <Stitle>Release Date:  {result.release_date}</Stitle>\r\n                </Minfo>\r\n                <Minfo>\r\n                    <Stitle>Genre: </Stitle>\r\n                    <Mitems>\r\n                        {result.genres.map(genre=> <Tag type=\"Genre\" name={genre}/>)}\r\n                    </Mitems>\r\n                \r\n                </Minfo>\r\n                <Minfo>\r\n                    <Stitle>Keywords: </Stitle>\r\n                    <Mitems>\r\n                        {result.keywords.map(keyword=> <Tag type=\"Keyword\" name={keyword}/>)}\r\n                    </Mitems>\r\n                \r\n                </Minfo>\r\n            </Right>\r\n        \r\n        </Wrap>        \r\n    );\r\n}\r\n//rating form component\r\nconst RatingForm = (props) => {\r\n    const api = new API();\r\n    const {movieID, avgRating, numRatings, userRating} = props;\r\n    const [N, setN] = numRatings;\r\n    const [avg, setAvg] = avgRating;\r\n    const [inp, setInp] = useState(userRating > -1);\r\n    const [load, setLoad] = useState(false);\r\n    const [rating, setRating] = useState(userRating > -1 ? userRating : 0);\r\n    const [able, setAble] = useState(true);\r\n    const button = <Button \r\n                        onClick={() => {setInp(true)}}\r\n                        variant=\"contained\"  \r\n                        color=\"primary\"\r\n                    >\r\n                       Rate this movie\r\n                    </Button>;\r\n\r\n    //handle user click on start to rate\r\n    const handleRate = (e) => {\r\n        const val = Number(e.target.value);\r\n        const prevRating = rating;\r\n        setRating(val);\r\n        setAble(false);\r\n        setLoad(true);\r\n        const data = {\r\n            'movieID': movieID,\r\n            'rating' : val\r\n        }\r\n        api.postJSON('user/rate', data, Session.authHeader())\r\n            .then(r => {\r\n                setAble(true);\r\n                setLoad(false);\r\n                // if average rating used\r\n                // if (!prevRating) { \r\n                //     setAvg((avg*N+val)/(N+1));\r\n                //     setN(N+1);\r\n                // } else {\r\n                //     setAvg((avg*N-prevRating+val)/N);\r\n                // }\r\n            }).catch((err) => alert(err['message']));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!inp ? button : \r\n                <RatingContainer>\r\n                    <Msg>Your Rating:</Msg>\r\n                    <section>\r\n                        <Rating \r\n                            value={rating}\r\n                            onChange={(event, newValue) => {\r\n                                handleRate(event);\r\n                            }}\r\n                            name=\"half-rating\" \r\n                            disabled={!able}\r\n                            precision={0.5}\r\n                            size=\"large\"\r\n                        />\r\n                        <span>{load && <i className=\"fas fa-spinner fa-spin\"></i>}</span>\r\n                    </section>\r\n                </RatingContainer>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Screen = styled.section`\r\n    border: none;\r\n    width: 100vw;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`;\r\n\r\nconst RatingContainer = styled.section`\r\n    section {\r\n        display: flex;\r\n        align-items: center;\r\n        > span {\r\n            margin-left: 10px;\r\n            height: 25px;\r\n        }\r\n    }\r\n`;\r\n\r\nconst Title = styled.span`\r\n    Font-weight:bold,\r\n    color:white;\r\n    font-size:30px;\r\n`;\r\n\r\n\r\nconst Left = styled.div`\r\n    display:flex;\r\n    flex-direction: column;\r\n    @media (max-width: 800px) {\r\n        margin-bottom: 3rem;\r\n    }\r\n`;\r\n\r\nconst Right = styled.div`\r\n\r\n    display:flex;\r\n    flex-direction: column;\r\n    margin-left:10rem;\r\n    @media (max-width: 800px) {\r\n        margin-left: 0;\r\n    }\r\n`;\r\n\r\nconst Wrap = styled.div`\r\n    margin: auto;\r\n    width: 70%;\r\n    display:flex;\r\n    justify-content: center;\r\n    padding:5rem;\r\n    color:white;\r\n    @media (max-width: 800px) {\r\n        flex-direction: column;\r\n    }\r\n\r\n`;\r\n\r\nconst PosterWrap = styled.div`\r\n    margin-top: 2rem;\r\n    width: 100%;\r\n\r\n`;\r\n\r\nconst PosterPic = styled.img`\r\n    width: 320px;\r\n\r\n`;\r\n\r\nconst ButtonWrap = styled.div`\r\n    display:flex;\r\n    justify-content: space-between;\r\n    margin-top: 1rem;\r\n    width: 320px;\r\n    > span {\r\n        color: orange;\r\n        width: 100%;\r\n        font-size: 2rem;\r\n        font-weight: 500;\r\n        text-align: center;\r\n    }\r\n\r\n`;\r\n\r\nconst Mbutton = styled(Button)`\r\n    width: 150px;\r\n    &&:disabled {\r\n        opacity: 0.5;\r\n        background: #3f51b5;\r\n        color: white;\r\n    }\r\n`;\r\n\r\nconst RatingWrap = styled.div`\r\n    padding-top: 3rem;\r\n    > * {\r\n        margin: 20px 0;\r\n    }\r\n`;\r\n\r\nconst Msg = styled.div`\r\n    margin-bottom: 0.5rem;\r\n    font-size 18px;\r\n    color:white;\r\n\r\n`;\r\n\r\nconst Stitle = styled.div`\r\n    font-size 25px;\r\n`;\r\n\r\nconst Mbox = styled(Box)`\r\n    font-size 15px;\r\n    margin-left: 1rem;\r\n    margin-top: 1rem;\r\n    display:inline;\r\n\r\n`;\r\n\r\nconst Mitems = styled.div`\r\n    margin-top: 2rem;\r\n    display: flex;\r\n    > * {\r\n        margin: 0 10px 20px 0;\r\n    }\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nconst Minfo = styled.div`\r\n    \r\n    margin-top: 3rem;\r\n\r\n`;\r\n\r\nconst Overview = styled.section`\r\n    color:white;\r\n    resize: none;\r\n    font-size 20px;\r\n    background-color:black;\r\n    width:100%;\r\n    min-height:300px;\r\n    border:none;\r\n    margin-top: 10px;\r\n    @media (max-width: 1317px) {\r\n        width:300px;\r\n    }\r\n`;\r\n\r\nconst AllRating = styled.div`\r\n    margin: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    color: white;\r\n    font-size: 20px;\r\n    line-height: 1;\r\n    .MuiRating-iconEmpty {\r\n        color: #222;\r\n    }\r\n`;\r\n\r\nconst NumRating = styled.section`\r\n    margin: 0 20px;\r\n    position: relative;\r\n    top: -1px;\r\n`;\r\n\r\nconst CButton = styled.button`\r\n    color: orange;\r\n    width: 100%;\r\n    font-size: 2rem;\r\n    font-weight: 500;\r\n    text-align: center;\r\n    background: none;\r\n    border: none;\r\n    padding: 0;\r\n    cursor: pointer;\r\n    outline: inherit;\r\n    &:hover {\r\n      text-decoration-line: underline;\r\n      text-decoration-thickness: 3px;\r\n    }\r\n`","import React, { useState, useEffect } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux'\r\nimport styled from 'styled-components';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\r\nimport API from '../api';\r\nimport * as Session from '../session';\r\nimport ISO6391 from 'iso-639-1';\r\nimport ImageUploader from 'react-images-upload';\r\nimport { firebase_app } from '../base.js';\r\nimport LoadingBox from '../components/LoadingBox';\r\n\r\n// for keywords, limit number of rendered matches to first hundred to prevent lag\r\nconst filterOptions = createFilterOptions({\r\n    limit: 100\r\n  });\r\n\r\nexport default function CreateMovieScreen() {\r\n    const history = useHistory();\r\n    const api = new API();\r\n    //movie's id\r\n    const { id } = useParams();\r\n    //load while submitting form\r\n    const [load, setLoad] = useState(false);\r\n    //load while retreiving movie details\r\n    const [loadEdit, setLoadEdit] = useState(true);\r\n\r\n    //edit status\r\n    const [originTitle,SetoriginTitle] = useState(\"\");\r\n    const [originurl, setOriginUrl] = useState();\r\n    const [isNewposter, setIsNewposter] = useState(false);\r\n\r\n    //options\r\n    const [Options,setOptions] = useState(undefined);\r\n\r\n    //selected options\r\n    const [selectGens,setSelectgens] = useState([]);\r\n    const [selectKeys,setSelectkeys] = useState([]);\r\n    const [selectLang,setSelectLang] = useState(\"\");\r\n    const [selectAge,setSelectAge] = useState(\"\");\r\n\r\n    //upload img\r\n    const [image,setImage] =useState();\r\n\r\n    //inputs\r\n    const [titleInput,setTitleInput] =useState(\"\");\r\n    const [overview,setOverview] = useState(\"\");\r\n    const [purchase,setPurchase] = useState(0);\r\n    const [rent,setRent] = useState(0);\r\n    const [runtime,setRuntime] = useState(0);\r\n    const [date,setDate] = useState(\"\");\r\n\r\n    //handle user submit button click call back\r\n    const handleSubmit = () =>{\r\n        //checks for missing params     \r\n        if(image === undefined && !originurl){\r\n            alert('Please upload movie poster');\r\n            return\r\n        }\r\n        if(titleInput === \"\"){\r\n            alert('Please input movie title');\r\n            return\r\n        }\r\n        if(selectLang === \"\"){\r\n            alert('Please input movie language');\r\n            return\r\n        }\r\n        if(overview === \"\"){\r\n            alert('Please input movie overview');\r\n            return\r\n        }\r\n        if(date === \"\"){\r\n            alert('Please input movie release date');\r\n            return\r\n        }\r\n        \r\n        // if id exist then editing mode else create mode\r\n        if(id){\r\n            EditExistingMovie();\r\n        }else{\r\n            SubmitNewMovie();\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    //submits new movie\r\n    const SubmitNewMovie = () =>{\r\n        setLoad(true);\r\n\r\n        try {\r\n            //upload image to firebase first\r\n            const storageRef = firebase_app.storage().ref();\r\n            const fileRef = storageRef.child(image.name);\r\n            fileRef.put(image).then(snapshot => {\r\n                //firebase returns a url after successful upload\r\n                snapshot.ref.getDownloadURL().then(url => {\r\n                    \r\n                    //gather all the data to submit to backend \r\n                    const data = {\r\n                        language : selectLang,\r\n                        title : titleInput,\r\n                        runtime : runtime,\r\n                        age_rating : selectAge,\r\n                        release_date : date,\r\n                        overview : overview,\r\n                        rentprice : rent,\r\n                        purchaseprice : purchase,\r\n                        url : url,\r\n                        genres: selectGens,\r\n                        keywords : selectKeys\r\n                    }\r\n                    //actually calling the backend \r\n                    api.postJSON('user/admin/create', data, Session.authHeader())\r\n                    .then((r) => {\r\n                        setLoad(false);\r\n                        //redirect to the movie page after succesful create\r\n                        history.push(`/movie/${r.movieID}`)\r\n                       \r\n                     })\r\n                    .catch((err) => alert(err['message']));\r\n\r\n\r\n                })\r\n            })    \r\n        } catch (error) {\r\n            alert('Error while uploading');\r\n            return; \r\n        }\r\n    }\r\n    \r\n    const EditExistingMovie = () => {\r\n        setLoad(true);\r\n\r\n        try {\r\n            //do we need to upload a new poster ? user might not make a change to the poster, in that case we dont talk to firebase\r\n            if(isNewposter){\r\n                //upload image to firebase first\r\n                const storageRef = firebase_app.storage().ref();\r\n                const fileRef = storageRef.child(image.name);\r\n                fileRef.put(image).then(snapshot => {\r\n                    //firebase returns a url after successful upload\r\n                    snapshot.ref.getDownloadURL().then(url => {\r\n                        \r\n                        //gather all the data to submit to backend \r\n                        const data = {\r\n                            id : id,\r\n                            language : selectLang,\r\n                            title : titleInput,\r\n                            runtime : runtime,\r\n                            age_rating : selectAge,\r\n                            release_date : date,\r\n                            overview : overview,\r\n                            rentprice : rent,\r\n                            purchaseprice : purchase,\r\n                            url : url,\r\n                            genres: selectGens,\r\n                            keywords : selectKeys\r\n                        }\r\n                        \r\n                        //actually calling the backend \r\n                        api.postJSON('user/admin/edit', data, Session.authHeader())\r\n                        .then((r) => {\r\n                            setLoad(false);\r\n                            //redirect to the movie page after succesful edit \r\n                            history.push(`/movie/${r.movieID}`)\r\n                           \r\n                         })\r\n                        .catch((err) => alert(err['message']));\r\n    \r\n                    })\r\n                })  \r\n            }else{\r\n                //same thing except we dont upload image\r\n                const data = {\r\n                    id: id,\r\n                    language : selectLang,\r\n                    title : titleInput,\r\n                    runtime : runtime,\r\n                    age_rating : selectAge,\r\n                    release_date : date,\r\n                    overview : overview,\r\n                    rentprice : rent,\r\n                    purchaseprice : purchase,\r\n                    url : originurl,\r\n                    genres: selectGens,\r\n                    keywords : selectKeys\r\n                }\r\n                console.log(data);\r\n\r\n                api.postJSON('user/admin/edit', data, Session.authHeader())\r\n                .then((r) => {\r\n                    setLoad(false);\r\n                    history.push(`/movie/${r.movieID}`)\r\n                   \r\n                 })\r\n                .catch((err) => alert(err['message']));\r\n\r\n            }\r\n  \r\n        } catch (error) {\r\n            alert('Error while uploading');\r\n            return; \r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    //material ui autocomplete require the data to be in specific format\r\n    const processOptions = (Options) =>{   \r\n        // add language options\r\n        Options.languages = ISO6391.getAllNames();\r\n        return Options;\r\n    }\r\n\r\n    // init create form\r\n    useEffect(() => {\r\n        //retrieve all the edit options\r\n        Session.getOptions()\r\n        .then(res =>{\r\n            const op = processOptions(res);\r\n            setOptions(op)\r\n        })\r\n        .catch(err => console.log(err['message']))\r\n\r\n\r\n        // if edit existing movie, init form entries with movie info\r\n        if (id) {\r\n\r\n            api.getJSON(`movie/${id}`, Session.authHeader())\r\n            .then(res=>{\r\n                SetoriginTitle(res.title);\r\n                setTitleInput(res.title);\r\n                setSelectgens(res.genres);\r\n                setSelectLang(res.language);\r\n                setSelectkeys(res.keywords);\r\n                setSelectAge(res.adult);\r\n                setOverview(res.overview);\r\n                setPurchase(res.purchaseprice);\r\n                setRent(res.rentprice);\r\n                setRuntime(res.runtime);\r\n                setDate(res.release_date);\r\n                setOriginUrl(res.url);\r\n                setLoadEdit(false);\r\n            }).catch((err) => alert(err['message']));\r\n\r\n        }\r\n\r\n    },[])\r\n\r\n    // don't render form if options data or movie data has yet to be retreived\r\n    if (Options === undefined || (id && loadEdit)) return (<Screen>(<LoadingBox /></Screen>);\r\n\r\n    //(isNewposter || !id) is to decide wether we need to display the image uploader\r\n    return(\r\n        <Screen>\r\n        <Head>{id ? `Edit \"${originTitle}\"`: \"Create New Movie\"}</Head>\r\n        <Wrap>\r\n\r\n            <Left>\r\n                \r\n                {(isNewposter || !id)\r\n                \r\n                ? (\r\n\r\n                    <div>\r\n                    \r\n                        <Suploader\r\n                         imgExtension={['.jpg', '.png']}\r\n                         label=\"Maximum file size: 5MB , accepted format: jpg|png\"\r\n                         maxFileSize={5242880}\r\n                         withPreview={true}\r\n                         singleImage={true}\r\n                         onChange={(Files) => setImage(Files[0])}\r\n                        />\r\n                    \r\n                    </div>\r\n\r\n                )\r\n                : (\r\n\r\n\r\n                    <div>\r\n                        <InnerWrap>\r\n                            {originurl ? (<PosterPic src={originurl} alt=\"cat\"></PosterPic>) : null}\r\n                        </InnerWrap>\r\n\r\n                        <Button\r\n                            onClick={() => setIsNewposter(true)}\r\n                            variant=\"contained\"  \r\n                            color=\"primary\">\r\n                            Upload New Poster\r\n                        </Button>                    \r\n                    \r\n                    </div>\r\n                )}\r\n\r\n                <Bwrap>\r\n                    <Button variant=\"contained\" color=\"secondary\" size=\"large\"\r\n                        onClick = {handleSubmit}>\r\n                        Submit \r\n                    </Button>\r\n                    {load && <i className=\"fas fa-spinner fa-spin\"></i>}\r\n                </Bwrap>\r\n\r\n            </Left>\r\n\r\n            <Right>\r\n            \r\n                <Title>\r\n                    <Text>Title</Text>\r\n                    <White>\r\n                    <Tinput\r\n                        type=\"text\" \r\n                        value = {titleInput}\r\n                        onChange = {(e)=>{setTitleInput(e.target.value)}}\r\n                        width='90%'\r\n                    >\r\n                    </Tinput>\r\n                    </White>\r\n                </Title>\r\n\r\n                <Title>\r\n                    \r\n                    <Text>Genre</Text>\r\n                        <White>\r\n                        <Autocomplete\r\n                            \r\n                            multiple\r\n                            id=\"tags-standard\"\r\n                            options={Options.genres}\r\n                            getOptionLabel={(option) => option}\r\n                            renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                variant=\"standard\"\r\n                                InputProps={{...params.InputProps, disableUnderline: true}}\r\n\r\n                            />\r\n                            )}\r\n                            value={selectGens}\r\n                            onChange={(event, value) => setSelectgens(value)}\r\n                        />\r\n                        </White>\r\n\r\n\r\n                </Title>\r\n\r\n                <Title>\r\n                    <Text>Language</Text>\r\n                    <White>\r\n                    <Autocomplete\r\n                        \r\n                        id=\"tags-standard\"\r\n                        options={Options.languages}\r\n                        getOptionLabel={(option) => option}\r\n                        renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            variant=\"standard\"\r\n                            InputProps={{...params.InputProps, disableUnderline: true}}\r\n\r\n                        />\r\n                        )}\r\n                        value = {ISO6391.getName(selectLang)}\r\n                        onChange={(event, value) => setSelectLang(value ? ISO6391.getCode(value) : '')}\r\n                    />\r\n                    </White>\r\n                </Title>\r\n\r\n                <Title>\r\n                    <Text>Keyword</Text>\r\n                    <White>\r\n                    <Autocomplete\r\n                        filterOptions={filterOptions}\r\n                        multiple\r\n                        id=\"tags-standard\"\r\n                        options={Options.keywords}\r\n                        getOptionLabel={(option) => option}\r\n                        renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            variant=\"standard\"\r\n                            InputProps={{...params.InputProps, disableUnderline: true}}\r\n\r\n                        />\r\n                        )}\r\n                        value={selectKeys}\r\n                        onChange={(event, value) => setSelectkeys(value)}\r\n                    />\r\n                    </White>\r\n                </Title>\r\n\r\n                <Title>\r\n                    <Text>Age Ratings</Text>\r\n                    <White>\r\n                    <Autocomplete\r\n                        id=\"tags-standard\"\r\n                        options={Options.ageRatings}\r\n                        getOptionLabel={(option) => option}\r\n                        renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            variant=\"standard\"\r\n                            InputProps={{...params.InputProps, disableUnderline: true}}\r\n                        />\r\n                        )}\r\n                        value={selectAge}\r\n                        onChange={(event, value) => setSelectAge(value)}\r\n                    />\r\n                    </White>\r\n                </Title>\r\n\r\n                <Title>\r\n                    Overview\r\n                    <Stextarea\r\n                        type=\"text\" \r\n                        value = {overview}\r\n                        onChange = {(e)=>{setOverview(e.target.value)}}\r\n                    >\r\n                    </Stextarea>\r\n                </Title>\r\n                <PriceBox>\r\n                    <Title>\r\n                        Purchase Price\r\n                        <Sinput \r\n                            \r\n                            type=\"number\" step=\"1\" pattern=\"\\d+\"\r\n                            value={purchase}\r\n                            onChange = {(e)=>{setPurchase(e.target.value)}}>\r\n                        </Sinput>\r\n                    </Title>\r\n                    <Title>\r\n                        Rent Price\r\n                        <Sinput \r\n                            type=\"number\" step=\"1\" pattern=\"\\d+\"\r\n                            value={rent}\r\n                            onChange = {(e)=>{setRent(e.target.value)}}>\r\n                            \r\n                        </Sinput>\r\n                    </Title>                  \r\n                </PriceBox>\r\n\r\n                <PriceBox>\r\n                    <Title>\r\n                        Runtime (minutes)\r\n                        <Sinput \r\n                            type=\"number\" step=\"1\" pattern=\"\\d+\"\r\n                            value={runtime}\r\n                            onChange = {(e)=>{setRuntime(e.target.value)}}>\r\n                            \r\n                            \r\n                        </Sinput>\r\n                    </Title>\r\n                    <Title>\r\n                        Release Date\r\n                        <Sinput \r\n                            type=\"date\"\r\n                            value={date}\r\n                            onChange = {(e)=>{setDate(e.target.value)}}\r\n                            width='150px'\r\n                            >\r\n\r\n                        </Sinput>\r\n                    </Title>\r\n                </PriceBox>\r\n\r\n            </Right>\r\n        </Wrap>\r\n        </Screen>\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\nconst Screen = styled.section`\r\n    border: none;\r\n    width: 100vw;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`;\r\n\r\nconst Head = styled.div`\r\n    color:white;\r\n    font-size: 40px;\r\n    font-weight: bold;\r\n    text-align: center;\r\n    margin:5rem;\r\n`\r\n\r\nconst Suploader = styled(ImageUploader)`\r\n    width: 250px;\r\n    height:20rem;\r\n`\r\n\r\nconst White = styled.div`\r\n    background-color:white;\r\n    padding: 10px;\r\n    border-radius: 10px;\r\n    input {\r\n        border-bottom: none;\r\n    }\r\n`\r\n\r\nconst Title =styled.div`\r\n    \r\n    padding-bottom: 3rem;\r\n\r\n\r\n`\r\nconst PriceBox = styled.div`\r\n    display:flex;\r\n    > * {\r\n        margin-right: 50px;\r\n    }\r\n\r\n    input {\r\n        margin-left: 10px;\r\n    }\r\n`\r\nconst Text = styled.div`\r\n    margin-bottom:1rem;\r\n\r\n`\r\n\r\nconst Stextarea = styled.textarea`\r\n    padding: 15px;\r\n    resize: none;\r\n    font-size 20px;\r\n    width:42rem;\r\n    height:300px;\r\n    border-radius: 5px;\r\n    margin-top: 1rem;\r\n\r\n`\r\nconst Tinput = styled.input`\r\n    border: none;\r\n    outline: none;\r\n    width: ${props => props.width ? props.width : '80px'};\r\n    height: 2rem;\r\n`\r\n\r\nconst Sinput = styled.input`\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n    width: ${props => props.width ? props.width : '80px'};\r\n    height: 2rem;\r\n    font-size: 1rem;\r\n`\r\n\r\nconst Left = styled.div`\r\n    flex: 1.5;\r\n    display:flex;\r\n    flex-direction: column;\r\n`\r\nconst Wrap = styled.div`\r\n    display:flex;\r\n    width: min(80vw, 1200px);\r\n    color:white;\r\n    font-size: 18px;\r\n`\r\nconst Right = styled.div`\r\n    flex: 2;\r\n    display:flex;\r\n    flex-direction: column;\r\n    padding: 20px;\r\n\r\n`\r\n\r\nconst PosterPic = styled.img`\r\n    max-width: 100%;\r\n    max-height: 100%;\r\n\r\n`\r\n\r\nconst InnerWrap = styled.div`\r\n    width: 240px;\r\n    height: 360px;\r\n    @media only screen and (max-width: 1635px) {\r\n        width: 180px;\r\n        height: 240px;\r\n      }\r\n\r\n`\r\nconst Bwrap = styled.span`\r\n    margin-top: 2rem;\r\n    > button {\r\n        margin-right: 1rem;\r\n    }\r\n\r\n`","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport { useHistory } from 'react-router-dom';\r\nimport API from '../api';\r\nimport * as Session from '../session';\r\nimport Tag from '../components/Tag';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport LoadingBox from '../components/LoadingBox';\r\n\r\nexport default function ProfileScreen() {\r\n    const history = useHistory();\r\n    const [email, setEmail] = React.useState('');\r\n    const [bdate, setBdate] = React.useState('');\r\n    const [selectGenres, setSelectGenres] = React.useState([]);\r\n    const [likedGenres, setLikedGenres] = React.useState([]);\r\n    const [edit, setEdit] = React.useState(false);\r\n    const [genres, setGenres] = React.useState([]);\r\n    const [load, setLoad] = React.useState(false);\r\n\r\n    const api = new API();\r\n    React.useEffect(() => {\r\n        // none logged users are directed to home\r\n        if (!Session.getToken()) {\r\n            history.push('/');\r\n            return;\r\n        }\r\n\r\n        // fetch profile data\r\n        api.getJSON('user/profile', Session.authHeader())\r\n            .then((r) => {\r\n                console.log(r);\r\n                setEmail(r.email);\r\n                setBdate(r.birthDate);\r\n                setSelectGenres([...r.likedGenre]);\r\n                setLikedGenres([...r.likedGenre]);\r\n            })\r\n            .catch((err) => alert(err['message']));\r\n    }, []);\r\n\r\n    const handleEdit = () => {\r\n        if (!edit) {\r\n            // fetch genres\r\n            Session.getOptions()\r\n                .then(res =>{\r\n                    setGenres(res.genres);\r\n                    setEdit(true);\r\n                })\r\n                .catch(err => console.log(err['message']))\r\n        } else if(!load) {\r\n            setLoad(true);\r\n\r\n            const data = {\r\n                likedGenre: selectGenres,\r\n            }\r\n\r\n            console.log(data);\r\n            api.postJSON('user/survey', data, Session.authHeader())\r\n                .then((r) => {\r\n                    setEdit(false);\r\n                    setLoad(false);\r\n                    setLikedGenres([...selectGenres]);\r\n                 })\r\n                .catch((err) => alert(err['message']));\r\n        }\r\n    }\r\n    \r\n    // show loading screen while fetching profile\r\n    if (!email) return(<Screen><LoadingBox /></Screen>);\r\n    \r\n    // favourite genre list\r\n    const favGenres = likedGenres.length === 0 ? <span>No favourites.</span> :\r\n        <Items><span>Favourite Genres:</span> {likedGenres.map(genre=> <Tag type=\"Genre\" name={genre} outline=\"#0e1025\"/>)}</Items>;\r\n\r\n\treturn (\r\n        <Screen>\r\n            <Section>\r\n                <UserIcon>\r\n                    <img src=\"./images/userIcon.svg\" alt='user icon' />\r\n                </UserIcon>\r\n                <Label>\r\n                  <span>Email:</span>\r\n                  <span>{email}</span>\r\n                </Label>\r\n                <Label>\r\n                  <span>Date of Birth:</span>\r\n                  <span>{bdate}</span>\r\n                </Label>\r\n            </Section>\r\n            <Section>\r\n                <div/>\r\n                <Label>\r\n                  {edit ? <span>Favourite Genres:</span> : null}\r\n                  {edit ? <Box>\r\n                                <Autocomplete\r\n                                    multiple\r\n                                    id=\"tags-standard\"\r\n                                    options={genres}\r\n                                    getOptionLabel={(option) => option}\r\n                                    renderInput={(params) => (\r\n                                    <TextField\r\n                                        {...params}\r\n                                        variant=\"standard\"\r\n                                    />\r\n                                    )}\r\n                                    value={selectGenres}\r\n                                    onChange={(event, value) => setSelectGenres(value)}\r\n                                    \r\n                                />\r\n                            </Box>\r\n                            :\r\n                            favGenres\r\n                    }\r\n                </Label>\r\n                <Edit>\r\n                    {!load && edit && <Button\r\n                                            onClick={() => {setEdit(false)}}\r\n                                            variant=\"contained\" \r\n                                            size=\"large\"\r\n                                            color=\"secondary\"\r\n                                            style={{ \r\n                                                    fontSize: '1rem',\r\n                                                    fontWeight: 'bold', \r\n                                                    color: 'white',\r\n                                                    margin: '0 20px' \r\n                                                }}\r\n                                        >\r\n                                            Cancel\r\n                                        </Button>\r\n                    }\r\n                    <Button \r\n                        onClick={handleEdit}\r\n                        variant=\"contained\" \r\n                        size=\"large\"\r\n                        color= {edit ? \"primary\" : \"secondary\"} \r\n                        \r\n                        style={{ \r\n                                fontSize: '1rem',\r\n                                fontWeight: 'bold', \r\n                                color: 'white', \r\n                            }}\r\n                    >\r\n                        {load && <i className=\"fas fa-spinner fa-spin\" style={{fontSize: \"1.75rem\"}}/>}\r\n                        {!load && edit && 'submit'}\r\n                        {!load && !edit && 'edit'}\r\n                    </Button>\r\n                </Edit>\r\n            </Section>\r\n        </Screen>\r\n\t);\r\n}\r\n\r\nconst Screen = styled.section`\r\n\tborder: none;\r\n\twidth: 100vw;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`;\r\n\r\nconst Section = styled.section`\r\n    margin-top: 120px;\r\n    border: none;\r\n    width: min(80vw, 650px);\r\n    min-height: 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    background-color: white;\r\n    > :nth-child(2) {\r\n        \r\n        border-bottom: 2px solid #eee;\r\n    }\r\n\r\n    border-radius: 10px;\r\n    padding: 10px 20px;\r\n`;\r\n\r\nconst Header = styled.header`\r\n    font-weight: bold;\r\n    font-size: 3.5rem;\r\n    color: white;\r\n`;\r\n\r\nconst Label = styled.label`\r\n    display: flex;\r\n    align-items: center;\r\n    width: 100%;\r\n    /*box-shadow: 1px 0 5px #ccc;*/\r\n    span {\r\n        margin: 10px;\r\n        font-size: min(6vw, 1.5rem);\r\n    }\r\n\r\n    span:first-child {\r\n        font-weight: 500;\r\n    }\r\n    padding: 10px;\r\n`;\r\n\r\nconst Edit = styled.section`\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    align-items: center;\r\n    padding: 10px;\r\n    > * {\r\n        margin: 10px;\r\n    }\r\n\r\n\r\n`;\r\n\r\nconst UserIcon = styled.section`\r\n    display: flex;\r\n    justify-content: center;\r\n    width: 100%;\r\n    img {\r\n        width: 200px;\r\n        margin: 50px 0;\r\n        /*filter: invert(.75);*/\r\n    }\r\n\r\n`;\r\n\r\nconst Items = styled.section`\r\n    display: flex;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n    > * {\r\n        margin: 5px 10px;\r\n    }\r\n`;\r\n\r\nconst Box = styled.section`\r\n    width: 100%;\r\n    padding: 30px;\r\n    \r\n    span.MuiChip-label {\r\n        padding: 10px;\r\n        font-size: min(6vw, 1.2rem);\r\n        color: #999;\r\n    }\r\n`;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { FormControl, Select, MenuItem, InputLabel } from '@material-ui/core';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport { useHistory } from 'react-router-dom';\r\nimport API from '../api';\r\nimport * as Session from '../session';\r\n\r\nexport default function SaleScreen() {\r\n    const api = new API();\r\n    const history = useHistory();\r\n    const [type, setType] = React.useState('Purchases');\r\n    const typeOptions = ['Purchases', 'Rentals'];\r\n    const [time, setTime] = React.useState('Past Week');\r\n    const timeOptions = ['Past Week', 'Past Month', 'Past Year', 'All Time'];\r\n    const [sort, setSort] = React.useState('Most Sales');\r\n    const sortOptions = ['Most Sales', 'Least Sales'];\r\n    const [update, setUpdate] = React.useState(false);\r\n    const [salesData, setSalesData] = React.useState({});\r\n\r\n    // fetch sales data on inti or change of form\r\n    React.useEffect(() => {\r\n        // none admin users are directed to home\r\n        if (!Session.isAdmin()) {\r\n            history.push('/');\r\n            return;\r\n        }\r\n        fetchData();\r\n    }, [update]);\r\n\r\n    // fetch sales data\r\n    const fetchData = () => {\r\n        const path = (typeOptions[0] === type) ? 'purchase':'rent';\r\n        let seconds = 60 * 60 * 24;\r\n        if (time === timeOptions[0]) seconds = seconds * 7;\r\n        else if (time === timeOptions[1]) seconds = seconds * 31;\r\n        else if (time === timeOptions[2]) seconds = seconds * 365;\r\n        else if (time === timeOptions[3]) seconds = seconds * 365 * 20;\r\n        \r\n        // get current time in seconds since epoch\r\n        const currTime = Math.floor(new Date().getTime() / 1000);\r\n        // construct url query\r\n        const query = {\r\n            start: currTime - seconds,\r\n            end: currTime,\r\n        }\r\n        const queryStr = new URLSearchParams(query).toString();\r\n        // fetch data\r\n        api.getJSON(`user/admin/sales/${path}?${queryStr}`, Session.authHeader())\r\n            .then((r) => {\r\n                console.log(r);\r\n                setSalesData(r);\r\n            })\r\n            .catch((err) => alert(err.message));\r\n    };\r\n\r\n\treturn (\r\n        <Screen>\r\n            <Section>\r\n                <FormContainer>\r\n                    <Label htmlFor=\"select-type\">                      \r\n                        <Options\r\n                            \r\n                            labelId=\"type-label\"\r\n                            id=\"select-type\"\r\n                            value={type}\r\n                            onChange={(e) => {setType(e.target.value); setUpdate(!update);}}\r\n                            range={typeOptions}\r\n                        />\r\n                    </Label>\r\n                   \r\n                    <Label htmlFor=\"select-time\">\r\n                        <Options\r\n                            \r\n                            labelId=\"time-label\"\r\n                            id=\"select-time\"\r\n                            value={time}\r\n                            onChange={(e) => {setTime(e.target.value); setUpdate(!update);}}\r\n                            range={timeOptions}\r\n                        />\r\n                    </Label>\r\n\r\n                    <Label htmlFor=\"select-sort\">\r\n                        <Options\r\n                            \r\n                            labelId=\"sort-label\"\r\n                            id=\"select-sort\"\r\n                            value={sort}\r\n                            onChange={(e) => {setSort(e.target.value);}}\r\n                            range={sortOptions}\r\n                        />\r\n                    </Label>\r\n                </FormContainer>\r\n                <Table data={salesData} descending={sort === sortOptions[0]}/>\r\n            </Section>\r\n            \r\n        </Screen>\r\n\t);\r\n}\r\n\r\nconst Screen = styled.section`\r\n\tborder: none;\r\n\twidth: 100vw;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`;\r\n\r\nconst Section = styled.section`\r\n    margin-top: 100px;\r\n    padding: 30px;\r\n    border-radius: 25px;\r\n    width: min(80vw, 800px);\r\n    min-height: 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    background-color: white;\r\n   \r\n`;\r\n\r\nconst FormContainer = styled.section`\r\n    display: flex;\r\n    width: 100%;\r\n    align-items: baseline;\r\n    font-weight: normal;\r\n    font-size: 1.3rem;\r\n    > span {\r\n        margin: 0 20px;\r\n    }\r\n`;\r\n\r\nconst Label = styled.label`\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 20px 10px;\r\n  \r\n  span {\r\n    margin: 10px;\r\n    font-size: min(6vw, 1em);\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\nconst Options = (props) => {\r\n  const {\r\n    labelName, labelId, id, value, onChange, range,\r\n  } = props;\r\n  return (\r\n    <FormControl variant=\"outlined\">\r\n      <Select\r\n        labelId={labelId}\r\n        id={id}\r\n        value={value}\r\n        onChange={onChange}\r\n      >\r\n        {range.map((v) => <MenuItem key={v} value={v}>{v}</MenuItem>)}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\n// Table of results\r\nconst Table = (props) => {\r\n  const { data, descending } = props;\r\n\r\n  // empty data\r\n  if (!data['result']) data['result'] = [];\r\n  \r\n  // create Movie:Sales data\r\n  const res = {};\r\n  const id = {};\r\n  for (let i = 0; i < data.result.length; i++) {\r\n      let title = data.result[i].movieTitle;\r\n      res[title] = (res[title] || 0) + 1; \r\n      id[title] = data.result[i].movieID;\r\n  }\r\n  \r\n  // create rows\r\n  const rows = Object.keys(res).map((k, i) => {\r\n      const row = {\r\n          id: id[k],\r\n          title: k,\r\n          sales: res[k],\r\n      }\r\n      return row;\r\n  });\r\n\r\n  // sort rows\r\n  if (descending) \r\n      rows.sort((a, b) => b.sales - a.sales);\r\n  else\r\n      rows.sort((a, b) => a.sales - b.sales);\r\n\r\n  const columns = [\r\n    { field: 'id', headerName: 'ID', width: 150 },\r\n    { field: 'title', headerName: 'Title', width: 350 },\r\n    {\r\n      field: 'sales',\r\n      headerName: 'Sales',\r\n      type: 'number',\r\n      width: 150,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <TableContainer>\r\n      <DataGrid rows={rows} columns={columns} pageSize={8} />\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nconst TableContainer = styled.section`\r\n  margin-top: 20px;\r\n  border-radius: 15px;\r\n  padding: 0;\r\n  width: 100%;\r\n  height: 580px;\r\n  * {\r\n    z-index: 0;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from '@material-ui/core/Button';\r\nimport { useHistory } from 'react-router-dom';\r\nimport LoadingBox from '../components/LoadingBox';\r\nimport Thumbnail from '../components/Thumbnail';\r\nimport API from '../api';\r\nimport * as Session from '../session';\r\n\r\nexport default function CartScreen() {\r\n    const api = new API();\r\n    const history = useHistory();\r\n    const update = React.useState(false);\r\n    const [change, setChange] = update;\r\n    const [cart, setCart] = React.useState(undefined);\r\n    const [total, setTotal] = React.useState(0);\r\n    const [canCheckout, setCanCheckout] = React.useState(false);\r\n\r\n    React.useEffect(() => {\r\n        api.getJSON('user/cart', Session.authHeader())\r\n            .then(r => {\r\n                console.log(r);\r\n                let newCart = [];\r\n                let sum = 0;\r\n                for (let i = 0; i < r.cart.length; i += 1) {\r\n                    newCart.push(<Item key={r.cart[i].movieID} item={r.cart[i]} update={update} />)\r\n                    sum += r.cart[i].price;\r\n                }\r\n                setCart([...newCart]);\r\n                setTotal(sum);\r\n                setCanCheckout(newCart.length !== 0);\r\n            }).catch((err) => alert(err['message']));\r\n    }, [change]);\r\n\r\n    const handleCheckout = () => {\r\n        history.push('/payment');\r\n    }\r\n\r\n    // display loading screen while fetching results\r\n    if (!cart) return (<Screen><LoadingBox /></Screen>);\r\n\r\n\treturn (\r\n        <Screen>\r\n            <ItemList>\r\n                <header> Cart </header>\r\n                {cart.length === 0 ? <span> No movies in cart. </span>\r\n                    : cart\r\n                }\r\n                {canCheckout && <Total> Total: {`$${total.toFixed(2)}`} </Total>}\r\n                <Checkout>\r\n                {canCheckout && <Button \r\n                                    onClick={handleCheckout}\r\n                                    variant=\"contained\" \r\n                                    size=\"large\"\r\n                                    color=\"primary\"\r\n                                    fullWidth\r\n                                    style={{ \r\n                                            fontSize: '1.2rem',\r\n                                            fontWeight: 'bold', \r\n                                            color: 'white', \r\n                                        }}\r\n                                >\r\n                                    Checkout\r\n                                </Button>}\r\n            </Checkout>\r\n            </ItemList>\r\n        </Screen>\r\n\t);\r\n}\r\n\r\nconst Screen = styled.section`\r\n\tborder: none;\r\n\twidth: 100vw;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`;\r\n\r\nconst Checkout = styled.section`\r\n\r\n`;\r\n\r\nconst ItemList = styled.section`\r\n    margin-top: 70px;\r\n    width: min(80vw, 1100px);\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    > * {\r\n        color: white;\r\n        width: 100%;\r\n        margin-bottom: 100px;\r\n    }\r\n\r\n    > header {\r\n        font-size: 4rem;\r\n        font-weight: 500;\r\n        text-align: center;\r\n        color: orange;\r\n        margin-bottom: 40px;\r\n    }\r\n\r\n    > span {\r\n        font-size: 3rem;\r\n        font-weight: 500;\r\n        color: #333;\r\n        width: 100%;\r\n        text-align: center;\r\n\r\n    }\r\n`; \r\n\r\nconst Total = styled.section`\r\n    width: 100%;\r\n    color: white;\r\n    font-size: 2.5rem;\r\n    text-align: center;\r\n    \r\n`;\r\n\r\nconst Item = (props) => {\r\n    const api = new API();\r\n    const history = useHistory();\r\n    const { item, update } = props;\r\n    const [change, setChange] = update;\r\n    const {movieID, title, url, rent, price} = item;\r\n    const [load, setLoad] = React.useState(false);\r\n\r\n    const handleDelete = () => {\r\n        setLoad(true);\r\n\r\n        const data = {\r\n            movieID: movieID,\r\n            rent : rent,\r\n            add: false,\r\n        };\r\n\r\n        api.postJSON(`user/cart`, data, Session.authHeader())\r\n            .then(r => {\r\n                Session.DecrementCartNum();\r\n                setChange(!change);\r\n                history.push(`/cart`);\r\n            }).catch((err) => alert(err['message']));\r\n    }\r\n    \r\n    return (\r\n        <ItemContainer>\r\n            <Poster>\r\n                <Thumbnail id={movieID} src={url} alt={title + ' poster'} width='300'/>\r\n            </Poster>\r\n            <Description>\r\n                <header> {title} </header>\r\n                <span> {rent ? 'Rent':'Buy'} </span>\r\n            </Description>\r\n            <Price>\r\n                {`$${price.toFixed(2)}`}\r\n            </Price>\r\n            <Delete>\r\n                <Button \r\n                    onClick={handleDelete}\r\n                    variant=\"contained\" \r\n                    size=\"large\"\r\n                    color=\"secondary\" \r\n                    fullWidth\r\n                    style={{ \r\n                            fontSize: '1.2rem',\r\n                            fontWeight: 'bold', \r\n                            color: 'white', \r\n                        }}\r\n                >\r\n                    {load ? <i className=\"fas fa-spinner fa-spin\"/> : 'X'}\r\n                </Button>\r\n            </Delete>\r\n        </ItemContainer>\r\n    );\r\n};\r\n\r\nconst ItemContainer = styled.section`\r\n    width: 100%;\r\n    display: flex;\r\n    \r\n`;\r\n\r\nconst Poster = styled.section`\r\n    width: 200px;\r\n    margin-right: 100px;\r\n`\r\n\r\nconst Description = styled.section`\r\n    width: 400px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    font-size: 1.8rem;\r\n    margin-right: 50px;\r\n    > * {\r\n        margin-bottom: 30px;\r\n    }\r\n`;\r\n\r\nconst Price = styled.section`\r\n    width: 100px;\r\n    display: flex;\r\n    font-size: 1.8rem;\r\n\r\n`;\r\n\r\nconst Delete = styled.section`\r\n    width: 100px;\r\n    height: 100%;\r\n    margin-left: auto;\r\n`;\r\n\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from '@material-ui/core/Button';\r\nimport { useHistory } from 'react-router-dom';\r\nimport API from '../api';\r\nimport * as Session from '../session';\r\n\r\nexport default function PaymentScreen() {\r\n    const api = new API();\r\n    const history = useHistory();\r\n    const [total, setTotal] = React.useState(0);\r\n    const [cardNo, setCardNo] = React.useState('');\r\n    const [cvv, setCVV] = React.useState('');\r\n    const [expDate, setExpDate] = React.useState('');\r\n    React.useEffect(() => {\r\n        api.getJSON('user/cart', Session.authHeader())\r\n            .then(r => {\r\n                console.log(r);\r\n                let sum = 0;\r\n                for (let i = 0; i < r.cart.length; i += 1) {\r\n                    sum += r.cart[i].price;\r\n                }\r\n                setTotal(sum);\r\n            }).catch((err) => alert(err['message']));\r\n    }, []);\r\n\r\n    const onSubmit = (e) => {\r\n        // stop auto redirect\r\n        e.preventDefault();\r\n\r\n        // validate credit card no\r\n        if (!/([0-9]{4}\\s?){4}/.test(cardNo)) {\r\n            alert(\"Invalid card number.\")\r\n            return;\r\n        }\r\n        // validate date\r\n        if (!/[0-9]{2}\\/[0-9]{2}/.test(expDate)) {\r\n            alert(\"Invalid date.\")\r\n            return;\r\n        }\r\n        const parse = expDate.split('/');\r\n        const mth = parseInt(parse[0]);\r\n        const yr =  parseInt('20' + parse[1]);\r\n        if (mth < 1 || mth > 12) {\r\n            alert(\"Invalid date of expire.\");\r\n            return;\r\n        }\r\n        if (new Date(yr, mth) < new Date()) {\r\n            alert(\"Your card has expired\");\r\n            return;\r\n        }\r\n        // validate cvv\r\n        if (!/[0-9]{3}/.test(cvv)) {\r\n            alert(\"Invalid cvv.\");\r\n            return;\r\n        }\r\n\r\n        const data = {\r\n            cardNo,\r\n            expDate,\r\n            cvv\r\n        }\r\n\r\n        api.postJSON('user/purchase', data, Session.authHeader())\r\n            .then(r => {\r\n                Session.setCartNum(0);\r\n                history.push('/history');\r\n            }).catch((err) => alert(err['message']));\r\n    };\r\n\r\n\treturn (\r\n        <Screen>\r\n            <Form onSubmit={onSubmit} autoComplete=\"off\">\r\n                <Header>Total: {`$${total.toFixed(2)}`}</Header>\r\n                <Label htmlFor=\"cardNo\">\r\n                  <span>Card Number:</span>\r\n                  <input\r\n                      type=\"text\"\r\n                      id=\"cardNo\"\r\n                      name=\"cardNo\"\r\n                      placeholder=\"1234 5678 9123 4567\"\r\n                      value={cardNo}\r\n                      onChange={(e) => setCardNo(e.target.value)}\r\n                  />\r\n                </Label>\r\n                <SubSection>\r\n                    <div>\r\n                      <Label htmlFor=\"exp\">\r\n                      <span>Expiry Date:</span>\r\n                      <input\r\n                          type=\"text\"\r\n                          id=\"exp\"\r\n                          name=\"exp\"\r\n                          placeholder=\"01 / 21\"\r\n                          value={expDate}\r\n                          onChange={(e) => setExpDate(e.target.value)}\r\n                      />\r\n                      </Label>\r\n                    </div>\r\n                    <div>\r\n                        <Label htmlFor=\"cvv\">\r\n                          <span>Security Code:</span>\r\n                          <input\r\n                              type=\"password\"\r\n                              id=\"cvv\"\r\n                              name=\"cvv\"\r\n                              placeholder=\"CVV\"\r\n                              value={cvv}\r\n                              onChange={(e) => setCVV(e.target.value)}\r\n                          />\r\n                        </Label>\r\n                    </div>\r\n                </SubSection>\r\n                <Button \r\n                    type=\"submit\"\r\n                    variant=\"contained\" \r\n                    size=\"large\" \r\n                    style={{ backgroundColor: 'white' }}\r\n                >\r\n                    Submit\r\n                </Button>\r\n            </Form>\r\n        </Screen>\r\n    );\r\n}\r\n\r\nconst Screen = styled.section`\r\n    border: none;\r\n    width: 100vw;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`;\r\n\r\nconst SubSection = styled.section`\r\n    display:flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n    > div {\r\n        width: 40%;\r\n    }\r\n`\r\n\r\nconst Form = styled.form`\r\n    margin-top: 150px;\r\n    border: none;\r\n    width: min(80vw, 650px);\r\n    min-height: 500px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    \r\n    > * {\r\n        margin-bottom: 40px;\r\n    }\r\n`;\r\n\r\nconst Header = styled.header`\r\n    font-weight: bold;\r\n    font-size: 2.5rem;\r\n    color: white;\r\n`;\r\n\r\nconst Label = styled.label`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    > * {\r\n        min-height: 30px;\r\n    }\r\n\r\n    input {\r\n        width: 100%;\r\n        font-size: 1.5rem;\r\n        height: 40px;\r\n    }\r\n\r\n    span {\r\n        margin-bottom: 5px;\r\n        font-size: min(6vw, 1.5rem);\r\n        color: white;\r\n    }\r\n`;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from '@material-ui/core/Button';\r\nimport { useHistory } from 'react-router-dom';\r\nimport API from '../api';\r\nimport * as Session from '../session';\r\nimport Category from '../components/Category';\r\nimport LoadingBox from '../components/LoadingBox';\r\nimport Thumbnail from '../components/Thumbnail';\r\n\r\nexport default function HistoryScreen() {\r\n    const api = new API();\r\n    const history = useHistory();\r\n    const [cat, setCat] = React.useState([]);\r\n    React.useEffect(() => {\r\n        api.getJSON(\"user/purchase\", Session.authHeader())\r\n            .then(r => {\r\n                // get current time in seconds since epoch\r\n                const currTime = Math.floor(new Date().getTime() / 1000);\r\n                let newCat = [];\r\n                // add purchases\r\n                let purchase = r.purchase.map(movie => <Item key={movie.movieID} item={movie} />)\r\n                newCat.push(<Category title='Purchased' items={purchase} />)\r\n                \r\n                // add rentals\r\n                let rental = r.rent.filter(movie => movie.endtime > currTime);\r\n                rental = rental.map(movie => <Item key={movie.movieID} item={movie} />)\r\n                newCat.push(<Category title='Rental' items={rental} />)\r\n\r\n                setCat([...newCat]);\r\n\r\n            }).catch((err) => alert(err['message']));\r\n      }, []);\r\n\r\n\treturn (\r\n        <Screen>\r\n            {cat.length === 0 ? (<LoadingBox />) : cat.map(rec => <CategoryContainer> {rec} </CategoryContainer>)}\r\n        </Screen>\r\n\t);\r\n}\r\n\r\nconst Screen = styled.section`\r\n\tborder: none;\r\n\twidth: 100vw;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`;\r\n\r\nconst CategoryContainer = styled.section`\r\n    width: 90vw;\r\n`;\r\n\r\nconst Item = (props) => {\r\n    const api = new API();\r\n    const history = useHistory();\r\n    const { item } = props;\r\n    const {movieID, title, url, ptime, endtime} = item;\r\n    // get current time in seconds since epoch\r\n    const currTime = Math.floor(new Date().getTime() / 1000);\r\n    let days = null;\r\n    // calculate time in days till rent expiry\r\n    if (endtime && endtime > currTime) {\r\n        days = Math.ceil((endtime - currTime)/(60*60*24));\r\n    }\r\n    \r\n\r\n    return (\r\n        <ItemContainer>\r\n            {days ? <Time> {`${days} days left`} </Time> : null}\r\n            <Poster>\r\n                <Thumbnail id={movieID} src={url} alt={title + ' poster'} width='300'/>\r\n            </Poster>\r\n            <header> {title} </header>\r\n            <Button \r\n                onClick={() => history.push(`/watch/${movieID}`)}\r\n                variant=\"contained\" \r\n                size=\"large\"\r\n                color=\"primary\"\r\n                fullWidth\r\n                style={{ \r\n                        fontSize: '1rem',\r\n                        fontWeight: 'bold', \r\n                        color: 'white', \r\n                    }}\r\n            >\r\n                Watch\r\n            </Button>\r\n\r\n        </ItemContainer>\r\n    );\r\n}\r\n\r\n\r\nconst ItemContainer = styled.section`\r\n    display:flex;\r\n    flex-direction: column;\r\n    color: white;\r\n    width: 200px;\r\n    margin: 3rem;\r\n    > * {\r\n        margin-bottom: 30px;\r\n    }\r\n    header {\r\n        overflow-wrap: anywhere;\r\n        font-size: 1.2rem;\r\n    }\r\n    img {\r\n        width: 200px;\r\n    }\r\n`;\r\n\r\nconst Poster = styled.section`\r\n    width: 200px;\r\n`\r\n\r\nconst Time = styled.section`\r\n    width: 100%;\r\n    font-size: 1rem;\r\n    font-weight: bold;\r\n    color: green;\r\n    text-align: center:\r\n`;","import React from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport Button from '@material-ui/core/Button';\r\nimport API from '../api';\r\nimport * as Session from '../session';\r\n\r\nexport default function WatchScreen() {\r\n    const api = new API();\r\n    const { id } = useParams();\r\n    const [err, setErr] = React.useState('');\r\n    const [title, setTitle] = React.useState(' ');\r\n    const ref = React.useRef(null);\r\n\r\n    React.useEffect(() => {\r\n        ref.current.scrollIntoView();\r\n\r\n        // setTimeout(() => {\r\n        //   \r\n        // }, 3000);\r\n\r\n        api.getJSON(`movie/${id}`, Session.authHeader())\r\n            .then(res=>{\r\n                setTitle(res.title);\r\n                setErr('Woops! Unable to retreive your movie, please come back later. (~_^)')\r\n            }).catch((err) => alert(err['message']));\r\n    }, [])\r\n\r\n\treturn (\r\n\t\t<Screen>\r\n\t\t\t<VideoContainer ref={ref}>\r\n                <header> {title} </header>\r\n                <Video>\r\n                    {err ? <span> {err} </span> : <i className=\"fa fa-spinner fa-spin\"></i>}\r\n                </Video>\r\n\t\t\t</VideoContainer>\r\n\t\t</Screen>\r\n\t);\r\n}\r\n\r\nconst Screen = styled.section`\r\n\tborder: none;\r\n\twidth: 100vw;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`;\r\n\r\nconst VideoContainer = styled.section`\r\n    > header {\r\n        color: white;\r\n        font-size: min(7vw, 2rem);\r\n        margin: 70px 0 10px 20px;\r\n        font-weight: 500;\r\n        min-height: 2.5rem;\r\n    }\r\n`;\r\n\r\nconst Video = styled.section`\r\n    width: 90vw;\r\n    height: 40vw;\r\n    background: #111;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color: white;\r\n    font-size: 5rem;\r\n    > span {\r\n        text-align: center;\r\n        font-size: min(5vw, 2rem);\r\n        width: 40vw;\r\n    }\r\n`;","import React from 'react';\r\nimport styled, {keyframes} from 'styled-components';\r\nimport Button from '@material-ui/core/Button';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { useHistory } from 'react-router-dom';\r\nimport API from '../api';\r\nimport * as Session from '../session';\r\n\r\nexport default function SurveyScreen(props) {\r\n    const api = new API();\r\n    const history = useHistory();\r\n    const [selectGens,setSelectgens] = React.useState([]);\r\n    const [genres,setGenres] = React.useState([]);\r\n    // get genres\r\n    React.useEffect(() => {\r\n        Session.getOptions()\r\n        .then(res =>{\r\n            setGenres(res.genres);\r\n        })\r\n        .catch(err => console.log(err['message']))\r\n  \r\n\r\n    },[])\r\n\r\n    const onSubmit = (e) => {\r\n        // stop auto redirect\r\n        e.preventDefault();\r\n        \r\n\r\n        const data = {\r\n            likedGenre: selectGens,\r\n        }\r\n\r\n        console.log(data);\r\n        api.postJSON('user/survey', data, Session.authHeader())\r\n            .then((r) => {\r\n                history.go(-2);\r\n             })\r\n            .catch((err) => alert(err['message']));\r\n    };\r\n\r\n\r\n\treturn (\r\n\t\t<Screen>\r\n          <Header>Help us recommend you better Movies. Take a quick survey.</Header>\r\n          <Form onSubmit={onSubmit} autoComplete=\"off\">\r\n            <Label htmlFor=\"genres\">\r\n                <span> What are some of your favourite movie genres? </span>\r\n                <Box>\r\n                    <Autocomplete\r\n                        multiple\r\n                        id=\"tags-standard\"\r\n                        options={genres}\r\n                        getOptionLabel={(option) => option}\r\n                        renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            variant=\"standard\"\r\n                            \r\n                        />\r\n                        )}\r\n                        value={selectGens}\r\n                        onChange={(event, value) => setSelectgens(value)}\r\n                        \r\n                    />\r\n                </Box>\r\n\r\n            </Label>\r\n            <Button \r\n                type=\"submit\"\r\n                variant=\"contained\" \r\n                size=\"large\" \r\n                color=\"primary\"\r\n            >\r\n                Submit\r\n            </Button>\r\n            <SkipContainer>\r\n                <SkipButton\r\n                    type=\"button\"                          \r\n                    onClick={() => { history.go(-2); }}\r\n                >\r\n                    Skip &nbsp;<i className=\"fas fa-chevron-right\"></i>\r\n                </SkipButton>\r\n            </SkipContainer>\r\n        </Form>      \r\n        </Screen>\r\n\t);\r\n}\r\n\r\n\r\nconst fade = keyframes`\r\n  from {\r\n    opacity: 0;\r\n    pointer-events: none;\r\n  }\r\n\r\n  to {\r\n    opacity: 100%;\r\n    pointer-events: auto;\r\n  }\r\n`;\r\n\r\n\r\nconst Screen = styled.section`\r\n    position: fixed;\r\n    z-index: 1;\r\n    top: 0;\r\n    left: 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 100vw;\r\n    height:100vh;\r\n    background: #eee;\r\n    overflow: scroll;\r\n    \r\n    animation-delay: 0s;\r\n    animation-name: ${fade};\r\n    animation-duration: 0.5s;\r\n    animation-timing-function: ease-in-out;\r\n    animation-fill-mode: forwards;\r\n`;\r\n\r\nconst Header = styled.header`\r\n    width: 30vw;\r\n    color: #999;\r\n    font-size: 2rem;\r\n    font-weight: 500;\r\n    text-align: center;\r\n    margin-top: 150px;\r\n    opacity: 0;\r\n    animation-delay: 1s;\r\n    animation-name: ${fade};\r\n    animation-duration: 0.8s;\r\n    animation-timing-function: ease-in-out;\r\n    animation-fill-mode: forwards;\r\n`;\r\n\r\nconst Form = styled.form`\r\n    margin-top: 100px;\r\n    border: none;\r\n    width: min(80vw, 650px);\r\n    min-height: 500px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    > * {\r\n        margin-bottom: 100px;\r\n    }\r\n\r\n    > :nth-child(1) {\r\n        opacity: 0;\r\n        animation-delay: 1.5s;\r\n        animation-name: ${fade};\r\n        animation-duration: 0.8s;\r\n        animation-timing-function: ease-in-out;\r\n        animation-fill-mode: forwards;\r\n    }\r\n\r\n    > :nth-child(2) {\r\n        opacity: 0;\r\n        animation-delay: 2s;\r\n        animation-name: ${fade};\r\n        animation-duration: 0.8s;\r\n        animation-timing-function: ease-in-out;\r\n        animation-fill-mode: forwards;\r\n    }\r\n\r\n    > :nth-child(3) {\r\n        opacity: 0;\r\n        animation-delay: 2.5s;\r\n        animation-name: ${fade};\r\n        animation-duration: 0.8s;\r\n        animation-timing-function: ease-in-out;\r\n        animation-fill-mode: forwards;\r\n    }\r\n`;\r\n\r\nconst Label = styled.label`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 80%;\r\n    > * {\r\n        min-height: 30px;\r\n    }\r\n\r\n    > input {\r\n        width: 97%;\r\n        font-size: 1.5rem;\r\n        height: 40px;\r\n        border: none;\r\n        padding: 10px;\r\n        border-radius: 20px;\r\n    }\r\n\r\n    > span {\r\n        margin-bottom: 20px;\r\n        margin-left: 0px;\r\n        font-size: min(6vw, 1.5rem);\r\n        color: #999;\r\n    }\r\n\r\n`;\r\n\r\nconst SkipContainer = styled.section`\r\n    display: flex;\r\n    align-items: baseline;\r\n    justify-content: center;\r\n    flex-wrap: wrap;\r\n    \r\n    > * {\r\n        color: white;\r\n        font-size: 1rem;\r\n    }\r\n    \r\n`;\r\n\r\nconst SkipButton = styled.button`\r\n    margin-top: 80px;\r\n    background: none;\r\n    border:none;\r\n    padding: 0;\r\n    font-size: 1.1rem;\r\n    font-weight: bold;\r\n    color: #999;\r\n    &:hover {\r\n      text-decoration-line: underline;\r\n      text-decoration-thickness: 2px;\r\n    }\r\n`;\r\n\r\nconst Box = styled.section`\r\n    background: white;\r\n    padding: 30px;\r\n    border-radius: 10px;\r\n    span.MuiChip-label {\r\n        padding: 10px;\r\n        font-size: min(6vw, 1.2rem);\r\n        color: #999;\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { FormControl, Select, MenuItem, InputLabel } from '@material-ui/core';\r\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Thumbnail from '../components/Thumbnail';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport API from '../api';\r\nimport * as Session from '../session';\r\nimport ISO6391 from 'iso-639-1';\r\n\r\n// for title limit number of rendered matches to first hundred to prevent lag\r\nconst filterOptions = createFilterOptions({\r\n    limit: 100\r\n  });\r\n\r\nexport default function AdminScreen(props) {\r\n    const api = new API();\r\n    const history = useHistory();\r\n    const [title, setTitle] = React.useState([]);\r\n    const [selectTitle, setSelectTitle] = React.useState('');\r\n    const [go, setGo] = React.useState(false);\r\n\r\n    // fetch movie titles\r\n    React.useEffect(() => {\r\n         api.getJSON(`user/admin/movie`, Session.authHeader())\r\n             .then(res=>{\r\n                 setTitle(res);\r\n             }).catch((err) => console.log(err['message']));\r\n\r\n        if (Session.getAdminData()) {\r\n            setSelectTitle(Session.getAdminData());\r\n            setGo(!go);\r\n        }\r\n    },[])\r\n\r\n    React.useEffect(() => {\r\n        console.log(selectTitle)\r\n         if (selectTitle === null) {\r\n            Session.setAdminData('');\r\n            setGo(!go);\r\n        }\r\n    },[selectTitle])\r\n\r\n    const handleUserView = () => {\r\n        if (selectTitle) Session.setAdminData(selectTitle);\r\n        history.push('/');\r\n    }\r\n\r\n\treturn (\r\n\t\t<Screen>\r\n            <Header> \r\n                <LogoutButton                         \r\n                        onClick={() => {Session.clearSession(); window.location.href='/';}}>\r\n                       Logout\r\n                </LogoutButton>\r\n                <span> Admin </span>\r\n                <SwitchButton>\r\n                    <Button \r\n                        onClick={handleUserView}\r\n                        variant=\"contained\" \r\n                        size=\"large\" \r\n                        color=\"secondary\"\r\n                    >\r\n                        user view\r\n                    </Button>\r\n                </SwitchButton>\r\n            </Header>\r\n            <Control>\r\n                <SearchLabel>\r\n                    <span> Movie: </span>\r\n                    <section>\r\n                        <Autocomplete\r\n                            filterOptions={filterOptions}\r\n                            id=\"tags-standard\"\r\n                            options={title}\r\n                            getOptionLabel={(option) => option}\r\n                            renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                variant=\"standard\"\r\n                            />\r\n                            )}\r\n                            value={selectTitle}\r\n                            onChange={(event, value) => setSelectTitle(value)}\r\n\r\n                        />\r\n                    </section>\r\n                    <Button \r\n                        onClick={() => {setGo(!go)}}\r\n                        variant=\"contained\" \r\n                        size=\"large\" \r\n                        color=\"primary\"\r\n                    >\r\n                        go\r\n                    </Button>\r\n                </SearchLabel>\r\n                <Button \r\n                    variant=\"contained\" \r\n                    size=\"large\" \r\n                    color=\"secondary\"\r\n                    onClick={() => {history.push(`/create`)}}\r\n                >\r\n                    add movie\r\n                </Button>\r\n            </Control>\r\n            <View>\r\n                <Movie title={selectTitle} go={go} />\r\n                <Sale title={selectTitle} go={go} />\r\n            </View>\r\n\t\t</Screen>\r\n\t);\t\r\n}\r\n\r\nconst Screen = styled.section`\r\n    position: fixed;\r\n    z-index: 1;\r\n    top: 0;\r\n    left: 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 100vw;\r\n    height:100vh;\r\n    background: #eee;\r\n    overflow: scroll;\r\n    \r\n`;\r\n\r\nconst Header = styled.section`\r\n    width: 100%;\r\n    color: red;\r\n    font-weight: bold;\r\n    font-size: 2rem;\r\n    text-align: center;\r\n    position: relative;\r\n    padding: 8px 0;\r\n\r\n`;\r\n\r\nconst SwitchButton = styled.section`\r\n    position: absolute;\r\n    top: 5px;\r\n    right: 15px;\r\n`;\r\n\r\nconst LogoutButton = styled.button`\r\n    position: absolute;\r\n    top: 10px;\r\n    left: 15px;\r\n    background: none;\r\n    border: none;\r\n    padding: 0;\r\n    cursor: pointer;\r\n    outline: inherit;\r\n    font-size: 1.5rem;\r\n    font-weight: bold;\r\n    color: #aaa;\r\n    &:hover {\r\n      text-decoration-line: underline;\r\n      text-decoration-thickness: 3px;\r\n    }\r\n`\r\n\r\nconst Control = styled.section`\r\n    margin-top: 100px;\r\n    padding: 30px;\r\n    border-radius: 25px;\r\n    width: min(80vw, 800px);\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    background-color: white;\r\n\r\n\r\n`;\r\n\r\nconst View = styled.section`\r\n    margin-top: 50px;\r\n    padding: 30px;\r\n    border-radius: 25px;\r\n    width: min(80vw, 800px);\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    background-color: white;\r\n`;\r\n\r\nconst SearchLabel = styled.label`\r\n    display: flex;\r\n    width: 50%;\r\n    > span {\r\n        font-size: 1.5rem;\r\n        font-weight: 500;\r\n        margin-right: 20px;\r\n    }\r\n\r\n    > section {\r\n        flex: 1;\r\n        margin-right: 20px;\r\n    }\r\n\r\n    input {\r\n        font-size: 1.2rem;\r\n    }\r\n`;\r\n\r\nfunction Sale(props) {\r\n    const {title, go} = props;\r\n    const api = new API();\r\n    const history = useHistory();\r\n    const [type, setType] = React.useState('Purchases');\r\n    const typeOptions = ['Purchases', 'Rentals'];\r\n    const [time, setTime] = React.useState('Past Week');\r\n    const timeOptions = ['Past Week', 'Past Month', 'Past Year', 'All Time'];\r\n    const [update, setUpdate] = React.useState(false);\r\n    const [salesData, setSalesData] = React.useState({});\r\n\r\n     // fetch sales data on inti or change of form\r\n     React.useEffect(() => {\r\n         fetchData();\r\n     }, [go, update]);\r\n\r\n    // fetch sales data\r\n    const fetchData = () => {\r\n        const path = (typeOptions[0] === type) ? 'purchase':'rent';\r\n        let seconds = 60 * 60 * 24;\r\n        if (time === timeOptions[0]) seconds = seconds * 7;\r\n        else if (time === timeOptions[1]) seconds = seconds * 31;\r\n        else if (time === timeOptions[2]) seconds = seconds * 365;\r\n        else if (time === timeOptions[3]) seconds = seconds * 365 * 20;\r\n        \r\n        // get current time in seconds since epoch\r\n        const currTime = Math.floor(new Date().getTime() / 1000);\r\n        // construct url query\r\n        const query = {\r\n            start: currTime - seconds,\r\n            end: currTime,\r\n            ...(title ? {title} : {})\r\n        }\r\n        const queryStr = new URLSearchParams(query).toString();\r\n        console.log(`${path}?${queryStr}`);\r\n        // fetch data\r\n        api.getJSON(`user/admin/sales/${path}?${queryStr}`, Session.authHeader())\r\n            .then((r) => {\r\n                console.log(r);\r\n                setSalesData({...r, title});\r\n            })\r\n            .catch((err) => console.log(err.message));\r\n    };\r\n\r\n    return (\r\n        \r\n            <Section>\r\n                <FormContainer>\r\n                    <Label htmlFor=\"select-type\">                      \r\n                        <Options\r\n                            \r\n                            labelId=\"type-label\"\r\n                            id=\"select-type\"\r\n                            value={type}\r\n                            onChange={(e) => {setType(e.target.value); setUpdate(!update);}}\r\n                            range={typeOptions}\r\n                        />\r\n                    </Label>\r\n                   \r\n                    <Label htmlFor=\"select-time\">\r\n                        <Options\r\n                            \r\n                            labelId=\"time-label\"\r\n                            id=\"select-time\"\r\n                            value={time}\r\n                            onChange={(e) => {setTime(e.target.value); setUpdate(!update);}}\r\n                            range={timeOptions}\r\n                        />\r\n                    </Label>\r\n\r\n                </FormContainer>\r\n                <Table data={salesData} rent={!(typeOptions[0] === type)}/>\r\n            </Section>\r\n            \r\n    );\r\n}\r\n\r\nconst Section = styled.section`\r\n    width: 100%;\r\n   \r\n`;\r\n\r\nconst FormContainer = styled.section`\r\n    display: flex;\r\n    width: 100%;\r\n    align-items: baseline;\r\n    font-weight: normal;\r\n    font-size: 1.3rem;\r\n    > span {\r\n        margin: 0 20px;\r\n    }\r\n`;\r\n\r\nconst Label = styled.label`\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 20px 20px 20px 0;\r\n  \r\n  span {\r\n    margin: 10px;\r\n    font-size: min(6vw, 1em);\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\nconst Options = (props) => {\r\n  const {\r\n    labelName, labelId, id, value, onChange, range,\r\n  } = props;\r\n  return (\r\n    <FormControl variant=\"outlined\">\r\n      <Select\r\n        labelId={labelId}\r\n        id={id}\r\n        value={value}\r\n        onChange={onChange}\r\n      >\r\n        {range.map((v) => <MenuItem key={v} value={v}>{v}</MenuItem>)}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\n// Table of results\r\nconst Table = (props) => {\r\n  const { title, data, rent } = props;\r\n\r\n  // empty data\r\n  if (!data['result']) data['result'] = [];\r\n\r\n  let rows = [];\r\n  let columns = [];\r\n  \r\n  // If no title given then display aggregate movie sales\r\n  if (!data.title) {\r\n      // create Movie:Sales data\r\n      const res = {};\r\n      const id = {};\r\n      for (let i = 0; i < data.result.length; i++) {\r\n          let title = data.result[i].movieTitle;\r\n          res[title] = (res[title] || 0) + 1; \r\n          id[title] = data.result[i].movieID;\r\n      }\r\n      \r\n      // create rows\r\n      rows = Object.keys(res).map((k, i) => {\r\n          const row = {\r\n              id: id[k],\r\n              title: k,\r\n              sales: res[k],\r\n          }\r\n          return row;\r\n      });\r\n\r\n      columns = [\r\n        { field: 'id', headerName: 'ID', width: 150 },\r\n        { field: 'title', headerName: 'Title', width: 350 },\r\n        {\r\n          field: 'sales',\r\n          headerName: 'Sales',\r\n          type: 'number',\r\n          width: 150,\r\n        },\r\n      ];\r\n   } else {\r\n    // display individual sales for movie   \r\n    // create rows\r\n      rows = data.result.map(res => {\r\n          const row = {\r\n              id: res.userID,\r\n              user: res.userEmail,\r\n              purchased: res.pdate,\r\n              ...(rent ? {end: res.endDate} : {})\r\n          }\r\n          return row;\r\n      });\r\n\r\n      columns = [\r\n        { field: 'id', headerName: 'ID', width: 150 },\r\n        { field: 'user', headerName: 'User', width: 250 },\r\n        { field: 'purchased', headerName: 'Purchased', flex: 1 },\r\n        ...(rent ? [{field: 'end', headerName: 'End', flex: 1 }] : [])\r\n      ];\r\n   }\r\n\r\n  return (\r\n    <TableContainer>\r\n      <DataGrid rows={rows} columns={columns} pageSize={8} />\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nconst TableContainer = styled.section`\r\n  margin-top: 20px;\r\n  border-radius: 15px;\r\n  padding: 0;\r\n  width: 100%;\r\n  height: 580px;\r\n  * {\r\n    z-index: 0;\r\n  }\r\n`;\r\n\r\n\r\nfunction Movie(props) {\r\n    const {title, go} = props;\r\n    const [movie, setMovie] = React.useState(undefined);\r\n    const [load, setLoad] = React.useState(false);\r\n    const [promoted, setPromoted] = React.useState(false);\r\n    const api = new API();\r\n    const history = useHistory();\r\n\r\n     // fetch movie data\r\n     React.useEffect(() => {\r\n          if (title) {\r\n             setLoad(true);\r\n              // construct url query\r\n             const query = {\r\n                 title,\r\n             }\r\n             const queryStr = new URLSearchParams(query).toString();\r\n \r\n             api.getJSON(`user/admin/movie?${queryStr}`, Session.authHeader())\r\n                 .then(res=>{\r\n                     console.log(res);\r\n                     setMovie(res);\r\n                     setPromoted(res.ispromoted);\r\n                     setLoad(false);\r\n                 }).catch((err) => {setLoad(false)});\r\n          } else {\r\n              setMovie(null);\r\n          }\r\n      }, [go]);\r\n\r\n\r\n    //admin only, promotes movie on homepage\r\n    const handlePromote = () => {\r\n        const data = {\r\n            'movieID': movie.id,\r\n            'promote': !movie.ispromoted,\r\n        }\r\n\r\n        api.postJSON('user/admin/promote', data, Session.authHeader())\r\n            .then(r => {\r\n                setPromoted(!promoted);\r\n            }).catch((err) => alert(err['message']));\r\n            \r\n    }\r\n\r\n    if (!movie && !load) {\r\n        return (null);\r\n    }\r\n\r\n    if (load) {\r\n        return (<Load><i className=\"fas fa-spinner fa-spin\"></i></Load>);\r\n    }\r\n\r\n    return (\r\n        <MovieBox>\r\n            <Edit>\r\n                <Button \r\n                    onClick={() => {history.push(`/edit/${movie.id}`)}}\r\n                    variant=\"contained\"  \r\n                    color=\"primary\"\r\n                >\r\n                   EDIT\r\n                </Button>\r\n                <Button \r\n                    onClick={handlePromote}\r\n                    variant=\"contained\"  \r\n                    color=\"primary\"\r\n                >\r\n                   {promoted ? 'unpromote' : 'promote'}\r\n                </Button>\r\n            </Edit>\r\n            <Info>\r\n                <Left>\r\n                    <header> {movie.title} </header>\r\n                    <Poster>\r\n                        <Thumbnail id={movie.id} src={movie.url} alt={movie.title + ' poster'} width='300'/>\r\n                    </Poster>\r\n                    <RatingWrap>\r\n                        <Rating name=\"half-rating-read\" value={movie.rating} precision={0.5} readOnly size=\"medium\"/>\r\n                        <span> {movie.rating} </span>  \r\n                        <span> ({movie.numRating}) </span>\r\n                    </RatingWrap>\r\n                </Left>\r\n                <Right>\r\n                    <InfoLabel >\r\n                        <header>Overview: </header>\r\n                        {movie.overview}\r\n                    </InfoLabel>\r\n                    <InfoLabel >\r\n                        <header>Language: </header>\r\n                        {ISO6391.getName(movie.language)}\r\n                    </InfoLabel>\r\n                    <InfoLabel >\r\n                        <header>MPAA: </header>\r\n                        {movie.adult}\r\n                    </InfoLabel>\r\n                    <InfoLabel >\r\n                        <header>Genre: </header>\r\n                        {movie.genres.join(', ')}\r\n                    </InfoLabel>\r\n                    <InfoLabel >\r\n                        <header>Keywords: </header>\r\n                        {movie.keywords.join(', ')}\r\n                    </InfoLabel>\r\n                    <InfoLabel >\r\n                        <header>Release Date: </header>\r\n                        {movie.release_date}\r\n                    </InfoLabel>\r\n                    <InfoLabel >\r\n                        <header>Purchase Price: </header>\r\n                        ${movie.purchaseprice}\r\n                    </InfoLabel>\r\n                    <InfoLabel >\r\n                        <header>Rent Price: </header>\r\n                        ${movie.rentprice}\r\n                    </InfoLabel>\r\n                </Right>\r\n            </Info>\r\n        </MovieBox>\r\n    )\r\n    \r\n}\r\n\r\nconst MovieBox = styled.section`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    \r\n`;\r\n\r\nconst Edit = styled.section`\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: flex-end;\r\n\r\n    > button {\r\n        margin: 10px;\r\n    }\r\n`;\r\n\r\nconst Info = styled.section`\r\n    width: 100%;\r\n    display: flex;\r\n    margin: 20px 0 50px 0;\r\n`;\r\n\r\nconst Left = styled.section`\r\n    flex: 1; \r\n    display: flex;\r\n    flex-direction: column;\r\n    > * {\r\n        margin-bottom: 20px;\r\n    }\r\n    > header {\r\n        font-size: 1.5rem;\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\nconst Right = styled.section`\r\n    flex: 1;  \r\n    display: flex;\r\n    flex-direction: column\r\n`;\r\n\r\nconst InfoLabel = styled.section`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    font-size: 1rem;\r\n    margin-bottom: 20px;\r\n    \r\n\r\n    > header {\r\n        font-size: 1rem;\r\n        font-weight: bold;\r\n        margin-right: 5px;\r\n    }\r\n`;\r\n\r\nconst Poster = styled.section`\r\n    width: 240px;\r\n    height: 350px;\r\n`;\r\n\r\nconst RatingWrap = styled.section`\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    height: 50px;\r\n    \r\n    > span {\r\n        line-height: 1;\r\n    }\r\n    > span:nth-child(2) {\r\n        margin: 0 15px 0 5px;\r\n    }\r\n`;\r\n\r\nconst Load = styled.section`\r\n    font-size: 2rem;\r\n`","import React, { useState, useEffect } from 'react';\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from '@material-ui/core/Button';\r\nimport { FormControl, Select, MenuItem, InputLabel } from '@material-ui/core';\r\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport * as Session from '../session';\r\nimport API from '../api';\r\n\r\n// capitalise first letter of word\r\nconst capFirst = (word) => {\r\n    return word.charAt(0).toUpperCase() + word.slice(1);\r\n}\r\n\r\n// capitalise every word in string\r\nconst cap = (str) => {\r\n    let words = str.split(' ');\r\n    return words.map(w => capFirst(w)).join(' ');\r\n} \r\n\r\n// get username from email\r\nconst getUsername = () => {\r\n    let email = Session.getEmail();\r\n    if (!email) return 'user';\r\n\r\n    return capFirst(email.split(/@/)[0]);\r\n}\r\n\r\n\r\n// for keyword limit number of rendered matches to first hundred to prevent lag\r\nconst filterOptions = createFilterOptions({\r\n    limit: 100\r\n  });\r\n\r\nexport default function Header() {\r\n    \r\n    //api object handles backend call\r\n    let api = new API();\r\n    //handle url change\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    //userinput\r\n    const [input,setInput] = useState('');\r\n    //drop downmenu\r\n    const [isDropDown, setDropDown] = useState(false);\r\n    const [isMenuDropDown, setMenuDropDown] = useState(false);\r\n    //cart hooks\r\n    const [category, setCategory] = useState(\"Title\");\r\n    const [cartN, setCartN] = useState(0);\r\n\r\n    // search options\r\n    const [genres, setGenres] = useState([]);\r\n    const [keywords, setKeywords] = useState([]);\r\n    const [selectedGenres, setSelectedGenres] = useState([]);\r\n    const [selectedKeywords, setSelectedKeywords] = useState([]);\r\n\r\n    // fetch movie genres and keywords\r\n    React.useEffect(() => {\r\n        Session.getOptions()\r\n        .then(res =>{\r\n            setGenres(res.genres);\r\n            setKeywords(res.keywords);\r\n        })\r\n        .catch(err => console.log(err['message']))\r\n\r\n    },[])\r\n\r\n    // set cart number and query params on change of location\r\n    useEffect(() => {\r\n        console.log(location);\r\n\r\n        // if logged in\r\n        if (Session.getToken()) {\r\n            if (Session.getCartNum()) {\r\n                setCartN(Session.getCartNum);\r\n            }\r\n            else {\r\n                // retrieve cart data\r\n                api.getJSON(`user/cart`, Session.authHeader())\r\n                    .then(r => {\r\n                        Session.setCartNum(r.cart.length);\r\n                        setCartN(r.cart.length);\r\n                        console.log(r.cart.length);\r\n                    })\r\n            }\r\n        }\r\n\r\n        // if search page\r\n        if (location.pathname === '/search') {\r\n            let searchParams = new URLSearchParams(location.search);\r\n            let cat = searchParams.get('category');\r\n            let q = searchParams.get('q');\r\n            setCategory(cat);\r\n            if (cat === 'Title') setInput(q);\r\n            else if (cat === 'Genre') setSelectedGenres(q.split('|').map(g => cap(g)));\r\n            else if (cat === 'Keyword') setSelectedKeywords(q.split('|'));\r\n            else if (cat === 'Overview') setInput(q);\r\n        }\r\n\r\n      }, [location]);\r\n\r\n    // don't render in admin view\r\n    if (location.pathname === '/admin')\r\n        return null;\r\n\r\n    //drop down switches\r\n    const handleDropDown = () => {\r\n        setDropDown(!isDropDown);\r\n    }\r\n\r\n    // handle search\r\n    const handleQuery = () => {\r\n        // create query params\r\n        const data = {\r\n            category\r\n        }\r\n\r\n        if (category === 'Title') data.q = input;\r\n        else if (category === 'Genre') data.q = selectedGenres.join('|');\r\n        else if (category === 'Keyword') data.q = selectedKeywords.join('|');\r\n        else if (category === 'Overview') data.q = input;\r\n\r\n        // if no input do nothing\r\n        if (!data.q) return;\r\n        // validate input\r\n        if (data.q.length > 500) {\r\n            alert(\"Search query too long.\");\r\n            return;\r\n        }\r\n\r\n        const urlParams = new URLSearchParams(data)\r\n        const urlQuery = \"?\" + urlParams.toString();\r\n\r\n        console.log(urlQuery);\r\n        history.push({\r\n            pathname: '/search',\r\n            search: urlQuery,\r\n            state: {},\r\n        })\r\n    }\r\n    \r\n    const onSubmit = (e) => {\r\n        // stop auto redirect\r\n        e.preventDefault();\r\n\r\n        handleQuery();\r\n    }\r\n\r\n    const signIn = <LoginButton                         \r\n                        onClick={() => { history.push('/login'); }}\r\n                   >\r\n                        Sign in\r\n                    </LoginButton>\r\n    \r\n    //admin user icon has additional \"create\"\r\n    //logout clears user session\r\n    const userIcon = <UserIcon \r\n                        onMouseEnter={() => {setMenuDropDown(true)}}\r\n                        onMouseLeave={() => {setMenuDropDown(false)}}>\r\n                         <img src=\"/images/userIcon.svg\" alt='user icon' />\r\n                         <MenuDropDown hide = {isMenuDropDown ? false : true} >\r\n                            <Option onClick={() => history.push('/profile')}> {getUsername()} </Option>\r\n                            <Option onClick={() => history.push('/history')}> My Movies</Option>\r\n                            {Session.isAdmin() && <Option onClick={() => history.push('/create')}> Add Movie</Option>}\r\n                            <Option onClick={() => {Session.clearSession(); window.location.href='/';}}> Logout </Option>\r\n                        </MenuDropDown>\r\n                     </UserIcon>\r\n\r\n    const cartIcon = <CartIcon onClick = {() => history.push('/cart')}>\r\n                         <img src=\"/images/cartIcon.svg\" alt='cart icon' />\r\n                         <span> {cartN} </span>\r\n                     </CartIcon>\r\n\r\n    return(\r\n        <Bar>\r\n        <Wrapper>\r\n            <Left>\r\n                <Logo \r\n                    onClick={() => {history.push(\"/\")}} \r\n                    src=\"/images/mlogo.png\" alt='logo'\r\n                    />\r\n            </Left>\r\n            <Middle>\r\n                <SearchBar>\r\n                    <Form onSubmit={onSubmit} autoComplete=\"off\">\r\n                        <OptionWrap onClick = { handleDropDown }>\r\n                            <CurrentOption>{category}</CurrentOption>\r\n\r\n                            <IconWrapper black>                \r\n                                <i className={isDropDown ? \"fas fa-chevron-up\" : \"fas fa-chevron-down\"}></i>\r\n                            </IconWrapper>   \r\n\r\n                            <DropDown hide = {isDropDown ? false : true}>\r\n                                <Option onClick={() => setCategory(\"Title\")}>Title</Option>\r\n                                <Option onClick={() => setCategory(\"Genre\")}>Genre</Option>\r\n                                <Option onClick={() => setCategory(\"Keyword\")}>Keyword</Option>\r\n                                <Option onClick={() => setCategory(\"Overview\")}>Overview</Option>\r\n                            </DropDown>\r\n\r\n                        </OptionWrap>\r\n                        <Label>\r\n                            {category === 'Title' && <input \r\n                                                        value={input}\r\n                                                        onChange = {(e)=>{setInput(e.target.value)}}\r\n                                                        type=\"text\" \r\n                                                        id=\"query\"\r\n                                                        name=\"query\"\r\n                                                        placeholder=\"Search..\"\r\n                                                    />}\r\n                            {category === 'Genre' && <section>\r\n                                                        <Autocomplete\r\n                                                            fullWidth\r\n                                                            multiple\r\n                                                            id=\"tags-standard\"\r\n                                                            options={genres}\r\n                                                            getOptionLabel={(option) => option}\r\n                                                            renderInput={(params) => (\r\n                                                            <TextField\r\n                                                                {...params}\r\n                                                                placeholder=\"Search..\"\r\n                                                                variant=\"standard\"\r\n                                                                InputProps={{...params.InputProps, disableUnderline: true}}\r\n                                                                \r\n                                                            />\r\n                                                            )}\r\n                                                            value={selectedGenres}\r\n                                                            onChange={(event, value) => setSelectedGenres(value)}\r\n                                                        />\r\n                                                        </section>}\r\n                            {category === 'Keyword' && <section>\r\n                                                        <Autocomplete\r\n                                                            filterOptions={filterOptions}\r\n                                                            multiple\r\n                                                            id=\"tags-standard\"\r\n                                                            options={keywords}\r\n                                                            getOptionLabel={(option) => option}\r\n                                                            renderInput={(params) => (\r\n                                                            <TextField\r\n                                                                {...params}\r\n                                                                placeholder=\"Search..\"\r\n                                                                variant=\"standard\"\r\n                                                                InputProps={{...params.InputProps, disableUnderline: true}}\r\n\r\n                                                            />\r\n                                                            )}\r\n                                                            value={selectedKeywords}\r\n                                                            onChange={(event, value) => setSelectedKeywords(value)}\r\n                                                        />\r\n                                                        </section>}\r\n                            {category === 'Overview' && <input \r\n                                                            value={input}\r\n                                                            onChange = {(e)=>{setInput(e.target.value)}}\r\n                                                            type=\"text\" \r\n                                                            id=\"query\"\r\n                                                            name=\"query\"\r\n                                                            placeholder=\"Search..\"\r\n                                                        />}\r\n                        </Label>\r\n                        <SearchButton type=\"submit\">\r\n                            <i className=\"fas fa-search fa-2x\"></i>\r\n                        </SearchButton>\r\n\r\n                    </Form>\r\n                </SearchBar>\r\n            </Middle>\r\n            <Right>\r\n                {Session.getToken() ? cartIcon : <div />}\r\n                {Session.getToken() ? userIcon : signIn}\r\n                \r\n            </Right>\r\n\r\n        </Wrapper>\r\n        {Session.isAdmin() && \r\n            <Admin>\r\n                <Button \r\n                    onClick={() => {history.push('/admin')}}\r\n                    variant=\"contained\" \r\n                    size=\"large\" \r\n                    color=\"secondary\"\r\n                >\r\n                    admin view\r\n                </Button>\r\n            </Admin>\r\n        }\r\n        </Bar>\r\n    );\r\n}\r\n\r\nconst Bar = styled.nav`\r\n    width: 100vw;\r\n`;\r\n\r\nconst Admin = styled.section`\r\n    width: 100%;\r\n    color: red;\r\n    font-weight: bold;\r\n    font-size: 2rem;\r\n    text-align: center;\r\n\r\n`;\r\n\r\nconst Wrapper = styled.section`\r\n    display:flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    color: white;\r\n    height: 80px;\r\n    /*border: 1px solid red;*/\r\n    * {\r\n        /*border: 1px solid red !important;*/\r\n\r\n    }\r\n`;\r\n\r\nconst Left = styled.section`\r\n    flex: 1;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100%;\r\n    @media (max-width: 1100px) {\r\n       flex: 0;\r\n    }\r\n    /*width: 240px;\r\n    \r\n    cursor:pointer;\r\n    :hover {\r\n        background: #333;\r\n    }\r\n    @media (max-width: 1317px) {\r\n        width: 150px;\r\n    }\r\n    @media (max-width: 800px) {\r\n        width: 0px;\r\n    }  */\r\n`;\r\n\r\nconst Right = styled.section`\r\n    flex: 1;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n\r\n`;\r\n\r\nconst Middle = styled.section`\r\n    flex: 4;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: flex-start;\r\n\r\n`\r\n\r\nconst Logo = styled.img`\r\n    width:80%;\r\n    :hover {\r\n        background: #333;\r\n    }\r\n`\r\nconst SearchBar = styled.div`\r\n    position: relative;\r\n    z-index: 1;\r\n    width: 80%;\r\n    display: flex;\r\n    background: white;\r\n    padding: 5px 20px;\r\n    border-radius: 30px;\r\n    margin-top: 15px;\r\n`;\r\n\r\nconst Form = styled.form`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    > * {\r\n        margin: 0 5px;\r\n    }\r\n`;\r\n\r\nconst SearchButton = styled.button`\r\n    background: none;\r\n    border: none;\r\n    padding: 0;\r\n    cursor: pointer;\r\n    outline: inherit;\r\n    i:hover {\r\n        color: #aaa;\r\n    }\r\n`;\r\n\r\n\r\nconst OptionWrap = styled.div`\r\n    display:flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    border-radius: 5px;\r\n    padding: 10px 5px;\r\n    > * {\r\n        margin: 0 5px;\r\n    }\r\n    &:hover{\r\n        background-color: grey;\r\n    }\r\n    transition: all .5s;\r\n`;\r\n\r\nconst DropDown = styled.div`\r\n    z-index: 5;\r\n    background-color: white;\r\n    display: ${props => props.hide ? \"none\" : \"unset\" };\r\n    position: absolute;\r\n    min-width:120px;\r\n    cursor: pointer;\r\n    top: 55px;\r\n    border-radius: 5px;\r\n    overflow: hidden;\r\n`;\r\n\r\nconst MenuDropDown = styled.div`\r\n    z-index: 1;\r\n    background-color: white;\r\n    display: ${props => props.hide ? \"none\" : \"unset\" };\r\n    position:absolute;\r\n    width:120px;\r\n    cursor:pointer;\r\n    top: 70px;\r\n    border-radius: 5px;\r\n    overflow: hidden;\r\n`;\r\n\r\nconst Option = styled.div`\r\n    color:black;\r\n    display: block;\r\n    padding: 1rem;\r\n    font-weight:bold;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    &:hover{\r\n        background-color: grey;\r\n    }\r\n\r\n`;\r\n\r\nconst CurrentOption = styled.div`\r\n    margin-bottom: 2px;\r\n    color:black;\r\n    font-weight:bold;\r\n    line-height: 1;\r\n`;\r\n\r\nconst IconWrapper = styled.span`\r\n    color: ${props => props.black ? \"black\" : \"white\"};\r\n    cursor:pointer;\r\n\r\n`;\r\n\r\nconst Label = styled.label`\r\n\r\n    flex: 1;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100%;\r\n    > input {\r\n        border: none;\r\n        outline: none;\r\n        width: 100%;\r\n        font-size: 1.2rem;\r\n    }\r\n\r\n    > section {\r\n        width: 100%;\r\n\r\n    }\r\n    \r\n`\r\n\r\nconst StyledInput = styled.input`\r\n    width: auto;\r\n    \r\n    font-size: 1.2rem;\r\n    @media (max-width: 1317px) {\r\n        width: 300px;\r\n    }\r\n    @media (max-width: 800px) {\r\n        width: 200px;\r\n    }\r\n`;\r\n\r\n\r\nconst UserIcon = styled.section`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100%;\r\n    \r\n    \r\n    img:hover {\r\n        filter: invert(0.8);\r\n    }\r\n\r\n    img {\r\n        filter: invert(1);\r\n        width: 50px;\r\n        height: 50px;\r\n        margin-right: 30px;\r\n        margin-left: 20px;\r\n        \r\n    }\r\n\r\n    @media (max-width: 1860px) {\r\n       margin-right: 40px;\r\n    }\r\n\r\n`;\r\n\r\nconst CartIcon = styled.section`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100%;\r\n    :hover {\r\n        background: #333;\r\n        span {\r\n            background: #333;\r\n        }\r\n    }\r\n    \r\n    img {\r\n        filter: invert(1);\r\n        width: 60px;\r\n        height: 60px;\r\n        position: relative;\r\n        left: 10px;\r\n        top: -2px;\r\n    }\r\n\r\n    span {\r\n        background-color: black;\r\n        height: 30px;\r\n        font-size: 1.9rem;\r\n        font-weight: bold;\r\n        color: orange;\r\n        position: relative;\r\n        left: -28px;\r\n        top: -15px;\r\n    }\r\n\r\n`;\r\n\r\nconst LoginButton = styled.button`\r\n    background: none;\r\n    border: none;\r\n    padding: 0;\r\n    cursor: pointer;\r\n    outline: inherit;\r\n    font-size: min(5vw, 1.5rem);\r\n    font-weight: bold;\r\n    color: white;\r\n    &:hover {\r\n      text-decoration-line: underline;\r\n      text-decoration-thickness: 2px;\r\n    }\r\n\r\n    @media (max-width: 1000px) {\r\n       margin-right: 20px;\r\n    }\r\n`;","import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nexport default function Footer() {\r\n\r\n    return(\r\n\r\n        <Inner>\r\n            <StyledImg src=\"/images/mflix.jpg\" alt=\"logo\"></StyledImg>\r\n            Copyright © 2021 Movieflix inc All right reserved        \r\n                \r\n        </Inner>\r\n\r\n\r\n    )\r\n}\r\n\r\n\r\nconst StyledImg = styled.img`\r\n    position: relative;\r\n    cursor:pointer;\r\n    height:50px;\r\n    width:50px;\r\n    left:40%;\r\n    padding-bottom:4rem;\r\n`\r\nconst Inner = styled.div`\r\n\r\n    text-align: center;\r\n    display:flex;\r\n    flex-direction: column;\r\n    margin-top: 20rem;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    width: 30rem;\r\n    font-size: 15px;\r\n    color: white;\r\n\r\n\r\n`\r\n","import React, { Component,useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport Chatbot from 'react-chatbot-kit';\r\nimport { createChatBotMessage } from \"react-chatbot-kit\";\r\nimport API from '../api';\r\nimport Thumbnail from './Thumbnail';\r\nimport * as Session from '../session';\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport Button from '@material-ui/core/Button';\r\n// import avatar from \"images/avatar.jpg\"\r\nexport default function Chatbot2(props) {\r\n    return(\r\n\r\n            <Chatbot config={config} actionProvider={ActionProvider} messageParser={MessageParser} />\r\n\r\n    )\r\n\r\n}\r\n\r\n// convert text into message object\r\nfunction txtMsg(txt) {\r\n    return {Type:'text', Content:txt};\r\n}\r\n\r\nconst ChatBoxContainer = styled.div`\r\n  position: fixed;\r\n  right:100px;\r\n  bottom:0;\r\n\r\n  width: 400px;\r\n  height:600px;\r\n  background-color:white;\r\n`\r\n\r\nclass MessageParser {\r\n    api = new API();\r\n    constructor(actionProvider, state) {\r\n      this.actionProvider = actionProvider;\r\n      this.state = state;\r\n    }\r\n  \r\n    parse(message) {\r\n\r\n        \r\n        const data = {\r\n            message:{\r\n                from:\"user\",\r\n                type:\"text\",\r\n                content: message\r\n            }\r\n        }\r\n        \r\n\r\n        this.api.postJSON('chatbot', data, Session.authHeader())\r\n        .then((r) => {\r\n            console.log(r);\r\n            this.actionProvider.createMessage(r)\r\n\r\n        \r\n            \r\n\r\n         })\r\n        .catch((err) => alert(err['message']));\r\n\r\n        \r\n    }\r\n  }\r\n  \r\n\r\n  \r\n// ActionProvider starter code\r\nclass ActionProvider {\r\n    constructor(createChatBotMessage, setStateFunc, createClientMessage) {\r\n        this.createChatBotMessage = createChatBotMessage;\r\n        this.setState = setStateFunc;\r\n        this.createClientMessage = createClientMessage;\r\n    }\r\n\r\n    confused() {\r\n        const confusedMessage = this.createChatBotMessage(txtMsg(\"I only talk about movie\"))\r\n        this.updateChatbotState(confusedMessage)\r\n    }\r\n    movie() {\r\n        const movieMessage = this.createChatBotMessage(txtMsg(\"movie is good\"))\r\n        this.updateChatbotState(movieMessage)\r\n    }\r\n    createMessage(message){\r\n        this.updateChatbotState(this.createChatBotMessage(message))\r\n    }\r\n    \r\n    updateChatbotState(message) {\r\n\r\n        this.setState(prevState => ({\r\n            ...prevState, messages: [...prevState.messages, message]\r\n        }))\r\n    }\r\n\r\n}\r\n  \r\n\r\n  \r\n// Config starter code\r\n\r\n\r\nconst config = {\r\n    initialMessages: [\r\n        createChatBotMessage(txtMsg(\"Hi, I'm here to help. What can I do for you\"), {\r\n            widget: \"learningOptions\",\r\n        }),\r\n    ],\r\n\r\n    botName:\"Mflix super bot\",\r\n    customComponents: {\r\n        botAvatar: (props) => <BotAvatar {...props} />,\r\n        botChatMessage: (props) => MyMessage(props)\r\n    },\r\n}\r\n  \r\n\r\n\r\n// <span>{typeof props.message === \"string\" ? props.message : \"here's what I found\"}</span>\r\n// <Link to = {typeof props.message === \"string\" ? props.message : null}>\"here's what I found\"</Link>\r\n\r\n  //<Simg src = {props.message.url} alt=\"posterurl\"/> \r\nconst BotAvatar = () => {\r\n    return (\r\n      <div className=\"react-chatbot-kit-chat-bot-avatar\">\r\n        <div className=\"react-chatbot-kit-chat-bot-avatar-container\">\r\n          <Icon src=\"/images/avatar3.png\" alt='bot icon' />\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\nconst Icon = styled.img`\r\n\r\n  width:60px;\r\n`\r\n\r\nconst MyMessage = (props) => {\r\n    // console.log(props)\r\n    const content = props.message.Content;\r\n    const type = props.message.Type;\r\n    \r\n    return (\r\n\r\n        <Dialogue className=\"react-chatbot-kit-chat-bot-message\">\r\n            {type === 'text' && <span> {content} </span>}\r\n            {type === 'search link' && <Search link={content} />}\r\n            {type === 'movie' && <Recommend movie={content} />}\r\n                            \r\n        </Dialogue>\r\n    )\r\n\r\n}\r\n\r\nconst Dialogue = styled.section`\r\n    padding: 10px;\r\n`;\r\n\r\nconst DialogueWrap = styled.section`\r\n    \r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-wrap: wrap;\r\n    > a {\r\n        color: white;\r\n        text-decoration: underline;\r\n        cursor: pointer;\r\n        word-break: break-all\r\n    }\r\n\r\n    > :first-child {\r\n        margin-bottom: 10px;\r\n    }\r\n\r\n    > header {\r\n        font-size: 1.2rem;\r\n        font-weight: 500;\r\n    }\r\n`;\r\n\r\nfunction Search(props) {\r\n    const {link} = props;\r\n    const history = useHistory();\r\n    let urlParams = new URLSearchParams(link.replace('search?', ''));\r\n    let keys = urlParams.get('q');\r\n    if (keys) keys = keys.split('|');\r\n\r\n    return (\r\n        <DialogueWrap>\r\n            <span> \r\n                Are you searching for movies with the {urlParams.get('category').toLowerCase()}{keys.length > 1 ? 's': null}: {keys.join(', ')}?\r\n            </span>\r\n            <Button \r\n                size=\"small\" \r\n                variant=\"contained\" \r\n                color=\"primary\" \r\n                onClick={() => {history.push(`/${link}`)}}\r\n                style={{ \r\n                    fontWeight: 'bold', \r\n                    background: '#504487', \r\n                }}\r\n            >\r\n                Link\r\n            </Button>\r\n        </DialogueWrap>\r\n    );    \r\n}\r\n\r\nfunction Recommend(props) {\r\n    const {movie} = props;\r\n    return (\r\n        <DialogueWrap>\r\n            <span> This movie matches your description.</span>\r\n            <header> {movie.title} </header>\r\n            <Thumbnail id={movie.id} src={movie.url} alt={movie.title + ' poster'} width='200'/>\r\n        </DialogueWrap>\r\n    )\r\n}","import React from 'react';\r\nimport styled, {keyframes} from 'styled-components';\r\nimport ChatbotMain from './Chatbot2';\r\n\r\nconst fade = keyframes`\r\n  from {\r\n    opacity: 0;\r\n    pointer-events: none;\r\n  }\r\n\r\n  to {\r\n    opacity: 100%;\r\n    pointer-events: auto;\r\n  }\r\n`;\r\n\r\nconst transition = keyframes`\r\n  from {\r\n    bottom: 30px;\r\n    right: 100px;\r\n  }\r\n\r\n  to {\r\n    bottom: 475px;\r\n    right: 410px;\r\n  }\r\n`;\r\n\r\nexport default function Chatbot(props) {\r\n    const [direction, setDirection] = React.useState(false);\r\n    const [animationIcon, setAnimationIcon] = React.useState(undefined);\r\n    const [animationBox, setAnimationBox] = React.useState(undefined);\r\n    const handleAnimate = () => {\r\n        // setAnimationIcon(transition);\r\n        setAnimationBox(fade);\r\n        setDirection(!direction);\r\n    }\r\n\treturn (\r\n\t\t<Container>\r\n            <Icon key={direction} onClick={handleAnimate} direction={direction} animation={animationIcon} ><img src=\"/images/avatar3.png\" alt=\"avatar\"/></Icon>\r\n            <Chatbox key={!direction}  direction={direction} animation={animationBox}>\r\n                <ChatbotMain />\r\n            </Chatbox>\r\n\t\t</Container>\r\n\t);\r\n}\r\n\r\nconst Container = styled.section`\r\n    pointer-events: none;\t\r\n    background: none;\r\n\tposition: fixed;\r\n    z-index: 1;\r\n\tbottom: 0;\r\n    right: 0;\r\n    display: flex;\r\n    justify-content: flex-end;\r\n`;\r\n\r\n//background: #0a51ad;\r\nconst Chatbox = styled.section`\r\n    .react-chatbot-kit-chat-container {\r\n        width: 300px;\r\n    }\r\n    pointer-events: none;\r\n    opacity: 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 290px;\r\n    height: 500px;\r\n    margin: 0 90px 100px 0;\r\n    border-radius: 2%;\r\n    animation-name: ${props => props.animation};\r\n    animation-duration: 0.5s;\r\n    animation-timing-function: ease-in-out;\r\n    animation-fill-mode: forwards;\r\n    animation-direction: ${props => props.direction ? 'normal':'reverse'};\r\n`;\r\n\r\nconst Icon = styled.section`\r\n    pointer-events: auto;\r\n    z-index: 1;\r\n    position: absolute;\r\n    bottom: 30px;\r\n    right: 100px;\r\n    > img {\r\n        background: white;\r\n        width: 40px;\r\n        height: 40px;\r\n        border-radius: 50%;\r\n     \r\n    }\r\n    animation-name: ${props => props.animation};\r\n    animation-duration: 0.8s;\r\n    animation-timing-function: ease-in-out;\r\n    animation-fill-mode: forwards;\r\n    animation-direction: ${props => props.direction ? 'normal':'reverse'};\r\n`\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\r\nimport * as Session from './session';\r\nimport HomeScreen from './screens/HomeScreen';\r\nimport LoginScreen from './screens/LoginScreen';\r\nimport RegisterScreen from './screens/RegisterScreen';\r\nimport TestingScreen from './screens/TestingScreen';\r\nimport SearchScreen from './screens/SearchScreen';\r\nimport MovieScreen from './screens/MovieScreen';\r\nimport CreateMovieScreen from './screens/CreateMovieScreen';\r\nimport ProfileScreen from './screens/ProfileScreen';\r\nimport SaleScreen from './screens/SaleScreen';\r\nimport CartScreen from './screens/CartScreen';\r\nimport PaymentScreen from './screens/PaymentScreen';\r\nimport HistoryScreen from './screens/HistoryScreen';\r\nimport WatchScreen from './screens/WatchScreen';\r\nimport SurveyScreen from './screens/SurveyScreen';\r\nimport AdminScreen from './screens/AdminScreen';\r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer';\r\nimport Chatbot from './components/Chatbot';\r\n\r\n\r\n\r\nfunction App() {\r\n  // init\r\n  React.useEffect(() => {\r\n      Session.getOptions()\r\n      .then(r => console.log(\"init success\"))\r\n      .catch((err) => alert(err['message']));\r\n    }, []);\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <Header />\r\n      <Switch>\r\n          <Route exact path=\"/\">\r\n              <HomeScreen />\r\n          </Route>\r\n          <Route path=\"/login\">\r\n              <LoginScreen />\r\n          </Route>\r\n          <Route path=\"/register\">\r\n              <RegisterScreen />\r\n          </Route>\r\n          <Route path=\"/search\">\r\n            <SearchScreen />\r\n          </Route>\r\n          <Route path=\"/movie/:id\">\r\n            <MovieScreen />\r\n          </Route>\r\n          <Route path=\"/profile\">\r\n            <ProfileScreen />\r\n          </Route>\r\n          <Route path=\"/sales\">\r\n            <SaleScreen />\r\n          </Route>\r\n          <Route path=\"/cart\">\r\n            <CartScreen />\r\n          </Route>\r\n          <Route path=\"/payment\">\r\n            <PaymentScreen />\r\n          </Route>\r\n          <Route path=\"/history\">\r\n            <HistoryScreen />\r\n          </Route>\r\n          <Route path=\"/create\">\r\n            <CreateMovieScreen />\r\n          </Route>\r\n          <Route path=\"/edit/:id\">\r\n            <CreateMovieScreen />\r\n          </Route>\r\n          <Route path=\"/watch/:id\">\r\n            <WatchScreen />\r\n          </Route>\r\n          <Route path='/survey'>\r\n            <SurveyScreen />\r\n          </Route>\r\n          <Route path='/admin'>\r\n            <AdminScreen />\r\n          </Route>\r\n          <Route exact path=\"/testing\">\r\n              <TestingScreen />\r\n          </Route>\r\n      </Switch>\r\n\r\n      <Chatbot />\r\n      <Footer />\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}